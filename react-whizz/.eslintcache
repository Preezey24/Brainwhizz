[{"/home/rhys/Brainwhizz/react-whizz/src/index.js":"1","/home/rhys/Brainwhizz/react-whizz/src/App.js":"2","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js":"3","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js":"4","/home/rhys/Brainwhizz/react-whizz/src/store/index.js":"5","/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js":"6","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js":"7","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js":"8","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js":"9","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js":"10","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js":"11","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js":"12","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js":"13","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js":"14","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js":"15","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js":"16","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js":"17","/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js":"18","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js":"19","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js":"20","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js":"21","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js":"22","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js":"23","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalLog.js":"24","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalSign.js":"25","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Instruction.js":"26","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Instruction.js":"27","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Instruction.js":"28","/home/rhys/Brainwhizz/react-whizz/src/components/footer/Footer.js":"29","/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashUnAuth.js":"30"},{"size":478,"mtime":1610416226499,"results":"31","hashOfConfig":"32"},{"size":2090,"mtime":1611589930580,"results":"33","hashOfConfig":"32"},{"size":2802,"mtime":1610826445546,"results":"34","hashOfConfig":"32"},{"size":3476,"mtime":1610807395826,"results":"35","hashOfConfig":"32"},{"size":848,"mtime":1610994747060,"results":"36","hashOfConfig":"32"},{"size":3298,"mtime":1610995453740,"results":"37","hashOfConfig":"32"},{"size":724,"mtime":1610821585556,"results":"38","hashOfConfig":"32"},{"size":9051,"mtime":1611286215694,"results":"39","hashOfConfig":"32"},{"size":2074,"mtime":1610128491513,"results":"40","hashOfConfig":"32"},{"size":217,"mtime":1610643915137,"results":"41","hashOfConfig":"32"},{"size":11301,"mtime":1611285655514,"results":"42","hashOfConfig":"32"},{"size":3034,"mtime":1610649520747,"results":"43","hashOfConfig":"32"},{"size":799,"mtime":1611071325607,"results":"44","hashOfConfig":"32"},{"size":796,"mtime":1611071325607,"results":"45","hashOfConfig":"32"},{"size":479,"mtime":1610935792366,"results":"46","hashOfConfig":"32"},{"size":223,"mtime":1610236844543,"results":"47","hashOfConfig":"32"},{"size":253,"mtime":1610236844543,"results":"48","hashOfConfig":"32"},{"size":3345,"mtime":1611668408686,"results":"49","hashOfConfig":"32"},{"size":1556,"mtime":1610998087580,"results":"50","hashOfConfig":"32"},{"size":1233,"mtime":1610824602956,"results":"51","hashOfConfig":"32"},{"size":890,"mtime":1610772529150,"results":"52","hashOfConfig":"32"},{"size":891,"mtime":1610772651980,"results":"53","hashOfConfig":"32"},{"size":5566,"mtime":1611631038520,"results":"54","hashOfConfig":"32"},{"size":1232,"mtime":1610823726666,"results":"55","hashOfConfig":"32"},{"size":765,"mtime":1610773298120,"results":"56","hashOfConfig":"32"},{"size":1478,"mtime":1611631891050,"results":"57","hashOfConfig":"32"},{"size":1452,"mtime":1611633070820,"results":"58","hashOfConfig":"32"},{"size":1579,"mtime":1611632778530,"results":"59","hashOfConfig":"32"},{"size":2094,"mtime":1611420030768,"results":"60","hashOfConfig":"32"},{"size":500,"mtime":1611625030160,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"ilkr6e",{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"64"},"/home/rhys/Brainwhizz/react-whizz/src/index.js",[],["133","134"],"/home/rhys/Brainwhizz/react-whizz/src/App.js",["135","136","137","138","139"],"import React, { useState, useEffect } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom'; \nimport { useSelector } from 'react-redux'; \nimport SplashAuth from './components/splash/SplashAuth'; \nimport SplashUnAuth from './components/splash/SplashUnAuth'; \nimport NavBar from './components/navigation/NavBar';\nimport MathGame from './components/games/math/MathGame';\nimport MemoryGame from './components/games/memory/MemoryGame';\nimport Drawing from './components/drawing/Drawing'; \nimport Footer from './components/footer/Footer';\nimport './index.css'; \nimport chalkboard from './images/chalkboard.jpg';\nimport math from './images/math-background.jpeg';\nimport draw from './images/draw_background.jpg'; \nimport board from './images/draw_board.png'\n\nexport const AuthContext = React.createContext();\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const history = useHistory(); \n\n  const user = useSelector(state => state.session.user); \n  useEffect(() => {\n    if (user) {\n      setIsAuthenticated(true); \n      history.push('/home'); \n    }\n  }, [user]);\n\n  return (\n    <>\n      <AuthContext.Provider value={setIsAuthenticated}>\n        <NavBar />\n      </AuthContext.Provider>\n      <Switch>\n        <Route exact path='/home'>\n          {(isAuthenticated) \n          ? <SplashAuth/>\n          : history.push('/')}\n        </Route>\n        <Route path='/math'>\n          {(isAuthenticated)\n            ? <MathGame />\n          : history.push(\"/\")}\n        </Route>\n        <Route path='/memory'>\n        {(isAuthenticated) \n          ? <MemoryGame />\n          : history.push(\"/\")}\n        </Route>\n        <Route path='/drawing'>\n          {(isAuthenticated)\n            ? <Drawing />\n            : history.push(\"/\")}          \n        </Route>\n      </Switch>\n        <SplashUnAuth />\n      {!isAuthenticated && \n        <Footer /> \n      }\n      <div id=\"preload\">\n        <img src={chalkboard}/>\n        <img src={math}/>\n        <img src={draw}/>\n        <img src={board}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/index.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js",["140"],"const SET_USER = 'session/setUser'; \nconst REMOVE_USER = 'session/removeUser'; \nconst SET_ERRORS = 'session/setErrors';\nconst REMOVE_ERRORS = 'session/removeErrors'; \n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER, \n        payload: user, \n    };\n}; \n\nconst removeUser = () => {\n    return {\n        type: REMOVE_USER, \n    };\n};\n\nconst setErrors = ({errors}) => {\n    return {\n        type: SET_ERRORS, \n        payload: errors, \n    }\n}\n\nexport const removeErrors = () => {\n    return {\n        type: REMOVE_ERRORS,\n    }\n}\n\nexport const signUp = (user) => async (dispatch) => {\n    const { username, email, password, confirm } = user; \n    try {\n        const response = await fetch('/auth/signup', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password,\n                confirm,\n                math_high: null, \n                math_total: null, \n                memory_high: null,\n                memory_total: null, \n                total_score: null,\n            }),\n        }); \n        if (response.ok) {\n            const data = await response.json();\n            dispatch(setUser(data)); \n        } else {\n            const errors = await response.json(); \n            dispatch(setErrors(errors));\n        }\n    } catch (err) {\n        console.log(err.message);\n    }  \n}; \n\nexport const logIn = (user) => async (dispatch) => {\n    const { email, password } = user;\n    try { \n        const response = await fetch('/auth/login', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        });\n        if (response.ok) {  \n            const data = await response.json(); \n            dispatch(setUser(data)); \n        } else {\n            const errors = await response.json();  \n            dispatch(setErrors(errors));\n        }\n    } catch (err) { \n        console.log(err); \n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    try {\n        const response = await fetch('/auth/logout')\n        if (response.ok) {\n            dispatch(removeUser()); \n        }\n    } catch (err) {\n        console.log(err); \n    }\n}\n\nconst initialState = { user: null, errors: null }; \n\nconst sessionReducer = (state = initialState, action) => {\n    let newState; \n    switch (action.type) {\n        case SET_USER: \n            //create a copy, do not mutate existing to avoid race conditions \n            newState = Object.assign({}, state);\n            newState.errors = null;  \n            newState.user = action.payload; \n            return newState; \n        case REMOVE_USER: \n            newState = Object.assign({}, state); \n            newState.user = null; \n            return newState; \n        case SET_ERRORS: \n            newState = state; \n            newState.errors = action.payload;\n            return newState;\n        case REMOVE_ERRORS: \n            newState = state; \n            newState.errors = action.payload;  \n        default: \n            return state; \n    }\n};\n\nexport default sessionReducer; ","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js",["141","142","143","144","145"],"import React, {useState, useEffect, useRef} from 'react';\nimport {useHistory} from 'react-router-dom'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport mathProblems from '../../component_utils/math_tables';\nimport { setUser } from '../../../store/reducers/session';\nimport './MathGame.css'; \nimport { IconContext } from 'react-icons/lib';\nimport { IoInformationCircleSharp } from \"react-icons/io5\";\nimport Instruction from './Instruction'; \n\nconst MathGame = () => {\n    //useRef for the score components so that they do not update on re-render\n    const gameScore = useRef(0);\n    const score = useRef(0); \n     \n    const history = useHistory(); \n    const dispatch = useDispatch(); \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //math questions & answers \n    const [questions, setQuestions] = useState(mathProblems())\n    const [answers, setAnswers] = useState({});\n    //countdown clock\n    const [time, setTime] = useState(60); \n    const [timeUp, setTimeUp] = useState(false);\n    const [counter, setCounter] = useState(60);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);  \n    //high score\n    const [high, setHigh] = useState({});\n    //instruction modal \n    const [infoModal, setInfoModal] = useState(false); \n\n    //calculate the actual answers for comparison with user input \n    let ansArr = []; \n    questions.forEach(question => {\n        let answer = eval(question); \n        ansArr.push(answer);  \n    });\n\n    //update the input answers array as answers are typed in\n    const answerHandler = e => {\n        const { id, value } = e.target; \n        setAnswers(answers => ({\n            ...answers, \n            [id]: value\n        }))  \n    };  \n\n    //change submithandler below from red to green once all input fields filled out\n    useEffect(() => {\n        let valArr = Object.values(answers); \n        if (valArr.length === 10) {\n            const go = document.querySelector('.questions__button');\n            go.style.backgroundColor = 'rgb(60, 255, 0)';\n        }\n    }, [answers])\n    \n    //when button is clicked to move onto the next set of math questions \n    const submitHandler = () => {\n        //complete validation that all inputs are filled out before advancing\n        let valArr = Object.values(answers); \n        let exit; \n        if (valArr.length !== 10) return; \n        valArr.forEach(val => {\n            if (!val) {\n                exit = true; \n                //this return is exiting from the callback, not the entire function\n                return; \n            }\n        }); \n        if (exit) {\n            return; \n        }\n\n        //check answers of user input versus correct answers  \n        ansArr.forEach((correct, i) => {\n           if (correct == answers[i]) {\n               gameScore.current += 1; \n               score.current += 1;\n           } \n        });  \n        move(); \n\n        //clean up input fields, reset answers and give a new set of questions \n        for (let i = 0; i < 10; i++) {\n            document.getElementById(i).value = null; \n        }\n        setAnswers({}); \n        setQuestions(mathProblems()); \n        //reset button color to red\n        const go = document.querySelector('.questions__button');\n        go.style.backgroundColor = 'red';      \n    }\n\n    //when time runs out and the modal appears, showing your score and asking whether you want to play again\n    //useEffect was used to combat constant re-rendering of the page as state changed\n    useEffect(() => {\n        if (time === 0) {\n            //reset state\n            setTimeUp(true); \n            setTime(null); \n            setIsOpen(true); \n            //update score database, check if high score\n            const updateScore = async () => {\n                try {\n                    const response = await fetch('/score/math/high', {\n                        method: 'PUT', \n                        headers: {\n                            'Content-Type': 'application/json'\n                        }, \n                        body: JSON.stringify({\n                            email: user.email, \n                            gameScore: gameScore.current,\n                        }),\n                    });\n                    if (response.ok) {\n                        if (response.status === 204) return;\n                        const data = await response.json(); \n                        setHigh(data); \n                    }\n                } catch (err) {\n                    console.log(err); \n                }\n            }\n            updateScore(); \n        }\n    }, [time]);\n\n    const info = () => {\n        setInfoModal(true);  \n    }\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setAnswers({}); \n        setQuestions(mathProblems()); \n        setTime(60);\n        setTimeUp(false); \n        setIsOpen(false); \n        setCounter(60);\n        setHigh({});\n        gameScore.current = 0; \n        //clean up input fields, reset answers and give a new set of questions \n        for (let i = 0; i < 10; i++) {\n            document.getElementById(i).value = null; \n        }\n    }\n    \n    // when button is clicked on modal to quit game \n    const exitGame = () => {\n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/math', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score: score.current, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore.current = 0;\n        score.current = 0;\n        history.push('/home')\n    }\n\n    //animate div movement from right to left, as if it were being replaced \n    function move() {\n        const container = document.querySelector('.chalkboard__div'); \n        container.style.animation = \"move 2s linear\"; \n        setTimeout(() => {\n            container.style.opacity = 0; \n        }, 667);\n        setTimeout(() => {\n            container.style.opacity = 1; \n        }, 1334);\n        setTimeout(() => {\n            container.style.removeProperty('animation'); \n        }, 2000)\n    };\n    \n    return (\n        <div className={\"page__math\"}>\n            <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter} />\n            <div className={\"chalkboard__div\"}>\n                <h2 className={\"chalkboard__heading\"}>Math Questions</h2>\n                <div className={\"questions__div_one\"}>\n                    {questions.map((question, i) => {\n                        if (i < 5) {\n                            return (\n                                    <div className={\"questions__question\"} key={i}>\n                                        {`${question} = `}\n                                        <input className={\"questions__answer\"} type='text' value={answers[i]} \n                                        onChange={answerHandler} id={i}/>\n                                    </div>\n                            )\n                        }\n                    })}\n                </div>\n                <div className={\"questions__div_two\"}>\n                    {questions.map((question, i) => {\n                        if (i >= 5) {\n                            return (\n                                    <div className={\"questions__question\"} key={i}>\n                                        {`${question} = `}\n                                        <input className={\"questions__answer\"} type='text' value={answers[i]} \n                                        onChange={answerHandler} id={i}/>\n                                    </div>\n                            )\n                        }\n                    })}\n                </div>\n                <div onClick={info}>\n                        <IconContext.Provider value={{className: 'math__info'}}>\n                            <IoInformationCircleSharp />\n                        </IconContext.Provider>\n                </div>\n            </div>\n            <button className={\"questions__button\"} onClick={submitHandler}>GO >>></button>\n            <div>\n                    <Instruction isOpen={infoModal} setIsOpen={setInfoModal}/>\n            </div>\n            {timeUp &&\n                <div>\n                    <Modal open={isOpen} gameScore={gameScore} score={score} playAgain={playAgain} \n                    high={high} exitGame={exitGame}/>\n                </div> \n            }\n        </div>\n    )\n}\n\nexport default MathGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js",["146"],"function getRandInt (max) {\n    return Math.floor(Math.random() * max); \n}\n\nfunction mathOp (operation) {\n    let nums; \n    let num1 = 2; \n    let num2 = 3; \n    switch (operation) {\n        case '+':\n            nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                48, 49, 50]\n            num1 = nums[getRandInt(49)];\n            num2 = nums[getRandInt(49)];\n            return `${num1} + ${num2}`; \n        case '-': \n            while (num1 < num2) {\n                nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                    33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                    48, 49, 50] \n                num1 = nums[getRandInt(49)]; \n                num2 = nums[getRandInt(49)]; \n            }\n            return `${num1} - ${num2}`; \n        case '/': \n            while (num1 % num2 !== 0) {\n                let nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                            18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                            48, 49, 50]\n                num1 = nums[getRandInt(49)];\n                num2 = nums[getRandInt(49)];\n            } \n            return `${num1} / ${num2}`; \n        case '*': \n            nums = [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12];  \n            num1 = nums[getRandInt(12)];\n            num2 = nums[getRandInt(12)];\n            return `${num1} * ${num2}`; \n    }\n};\n\nfunction mathProblems () {\n    const ops = ['+', '-', '/', '*']; \n    let qArr = []; \n    for (let i = 0; i < 10; i++) {\n        //establish operation to be used at random\n        const op = ops[getRandInt(4)];\n        qArr.push(mathOp(op)) \n    }\n    return qArr; \n}\n\nexport default mathProblems; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js",["147","148","149"],"import React, { useState, useEffect, useRef } from 'react'; \nimport {useHistory} from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport Light from './Light';  \nimport { randColor } from '../../component_utils/memory';\nimport './Memory.css'; \nimport { setUser } from '../../../store/reducers/session';\nimport {IconContext} from \"react-icons\"; \nimport {FcElectronics} from 'react-icons/fc';\nimport {IoLogoXbox} from 'react-icons/io5'; \nimport {VscDashboard} from 'react-icons/vsc'; \nimport turret from '../../../images/turret.png';\nimport {AiFillFire} from 'react-icons/ai'; \nimport { IoInformationCircleSharp } from \"react-icons/io5\";\nimport Instruction from './Instruction'; \n\n//so data persists passed certain re-rendering\nlet answerArr = []; \n\nconst MemoryGame = () => {\n    //useRef for the score components so that they do not update on re-render\n    const gameScore = useRef(0);\n    const score = useRef(0);\n\n    const history = useHistory();\n    const dispatch = useDispatch();  \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //memory light color array, that contains the correct answers\n    const [colors, setColors] = useState([]);  \n    //set keyframes \n    const [keyFrame, setKeyFrame] = useState([]); \n    //countdown clock\n    const [time, setTime] = useState('00:03'); \n    const [counter, setCounter] = useState(3);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);\n    //high score \n    const [high, setHigh] = useState({});\n    //instruction modal \n    const [infoModal, setInfoModal] = useState(false); \n\n    //test button click \n    const mainClick = () => {\n        let nextColor = randColor(); \n        while (nextColor === colors[colors.length-1]) {\n            nextColor = randColor(); \n        }\n        setColors([...colors, nextColor]); \n        score.current += 1; \n        gameScore.current += 1; \n        setCounter(3); \n        answerArr = [];\n        //keyframe animations for color dynamic transitions \n        setKeyFrame([...keyFrame, {backgroundColor: `${nextColor}`}]);\n\n        const container = document.getElementById('lights'); \n        container.setAttribute('style', 'display: none;'); \n        const button = document.getElementById('go'); \n        button.setAttribute('style', 'display: none;'); \n    }\n    \n    useEffect(() => {\n        const main = document.getElementById(\"main_light\");\n        main.animate(keyFrame, 3000); \n    }, [colors])\n\n    //have the lights appear for the user to select after color transitions complete\n    useEffect(() => {\n        if (time === '00:00') {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n        }\n        if (colors.length === 0) {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    }, [time])\n\n    //color transitiion on light click for the user\n    //make comparison between correct answer and user answer \n    const lightClick = (e) => {\n        const light = document.getElementById(e.target.id); \n        light.animate([{backgroundColor: `${light.id}`}, {backgroundColor: 'white'}, \n                        {backgroundColor: `${light.id}`}], 600); \n        answerArr.push(light.id);\n        //activate laser one\n        const laserOne = document.getElementById(\"laserOne\");\n        const flameOne = document.getElementById(\"flameOne\");  \n        laserOne.setAttribute(\"stroke\", light.id); \n        let lengthOne = 0; \n        let lineDashArrayOne;\n        const laserAdvanceOne = setInterval(() => {\n            lineDashArrayOne = `${lengthOne += 28} 140`;\n            laserOne.setAttribute(\"stroke-dasharray\", lineDashArrayOne);\n        }, 100);\n        setTimeout(() => {\n            clearInterval(laserAdvanceOne);\n            laserOne.setAttribute(\"stroke-dasharray\", \"0 140\");\n            flameOne.style.display = \"block\"; \n        }, 600);\n        setTimeout(() => {\n            flameOne.style.display = \"none\"; \n        }, 800)\n\n        //activate laser two\n        const laserTwo = document.getElementById(\"laserTwo\");\n        const flameTwo = document.getElementById(\"flameTwo\");\n        laserTwo.setAttribute(\"stroke\", light.id); \n        let lengthTwo = 0; \n        let lineDashArrayTwo;\n        const laserAdvanceTwo = setInterval(() => {\n            lineDashArrayTwo = `${lengthTwo += 28} 140`;\n            laserTwo.setAttribute(\"stroke-dasharray\", lineDashArrayTwo);\n        }, 100);\n        setTimeout(() => {\n            clearInterval(laserAdvanceTwo);\n            laserTwo.setAttribute(\"stroke-dasharray\", \"0 140\"); \n            flameTwo.style.display = \"block\";\n        }, 600);\n        setTimeout(() => {\n            flameTwo.style.display = \"none\"; \n        }, 800)\n        \n        //check answer\n        answerArr.forEach((answer, i) => {\n            if (answer !== colors[i]) {\n                //update score database, check if high score\n                const updateScore = async () => {\n                    try {\n                        const response = await fetch('/score/memory/high', {\n                            method: 'PUT', \n                            headers: {\n                                'Content-Type': 'application/json'\n                            }, \n                            body: JSON.stringify({\n                                email: user.email, \n                                gameScore: gameScore.current,\n                            }),\n                        });\n                        if (response.ok) {  \n                            if (response.status === 204) return; \n                            const data = await response.json(); \n                            setHigh(data); \n                        }\n                    } catch (err) {\n                        console.log(err); \n                    }\n                }\n                updateScore(); \n                setIsOpen(true); \n            }\n        });\n        //make button appear for next round\n        if (answerArr.length === colors.length) {\n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    };\n\n    const info = () => {\n        setInfoModal(true);  \n    }\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setTime('00:03');\n        setIsOpen(false); \n        setCounter(3)\n        gameScore.current = 0; \n        setColors([]); \n        setKeyFrame([]); \n        setHigh({}); \n    }\n\n    // when button is clicked on modal to quit game \n    const exitGame = () => { \n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/memory', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score: score.current, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore.current = 0;\n        score.current = 0;\n        history.push('/home');\n    }\n    \n    return (\n        <div className={\"page__memory\"}>\n            <div className={\"main\"} id={\"main_light\"}/>\n            <div className={\"container__lights\"} id={'lights'}>\n                <img src={turret} className={\"container__turret\"}/>\n                <div className={\"container__laser-one-div\"}>\n                    <svg className={\"container__laser-one-svg\"} xmlns=\"http://www.w3.org/2000/svg\">\n                        <line id={\"laserOne\"} className={\"container__laser-beam\"} x1=\"0\" y1=\"140\" x2=\"0\" y2=\"0\" \n                        strokeDasharray=\"0 140\"/>\n                    </svg>\n                </div>\n                <div className={\"container__laser-two-div\"}>\n                    <svg className={\"container__laser-two-svg\"} xmlns=\"http://www.w3.org/2000/svg\">\n                        <line id={\"laserTwo\"} className={\"container__laser-beam\"} x1=\"0\" y1=\"140\" x2=\"0\" y2=\"0\" \n                        strokeDasharray=\"0 140\"/>\n                    </svg>\n                </div>\n                <FcElectronics className={\"container__electronics\"}/>\n                <IoLogoXbox className={\"container__xbox\"}/>\n                <div className={\"container__xbox-dot\"}></div>\n                <VscDashboard className={\"container__dashboard\"}/>\n                <div id={\"flameOne\"} className={\"container__flame-divOne\"}>\n                    <IconContext.Provider value={{color:\"orange\", size: \"40px\"}}>\n                        <AiFillFire/>\n                    </IconContext.Provider>\n                </div>\n                <div id={\"flameTwo\"} className={\"container__flame-divTwo\"}>\n                    <IconContext.Provider value={{color:\"orange\", size: \"40px\"}}>\n                        <AiFillFire/>\n                    </IconContext.Provider>\n                </div>\n                <Light lightClick={lightClick} id={'red'} style={{backgroundColor: 'red',\n                position: 'absolute', top: '210px', left: '230px'}}/>\n                <Light lightClick={lightClick} id={'blue'} style={{backgroundColor: 'blue',\n                position: 'absolute', top: '210px', left: '-140px'}}/>\n                <Light lightClick={lightClick} id={'green'} style={{backgroundColor: 'green', \n                position: 'absolute', top: '120px', left: '-40px', width: \"80px\", height: \"80px\"}}/>\n                <Light lightClick={lightClick} id={'yellow'} style={{backgroundColor: 'yellow',\n                position: 'absolute', top: '120px', left: '140px', width: \"80px\", height: \"80px\"}}/>\n                <Light lightClick={lightClick} id={'purple'} style={{backgroundColor: 'purple',\n                position: 'absolute', top: '210px', left: '40px'}}/>\n                <div onClick={info}>\n                        <IconContext.Provider value={{className: 'memory__info'}}>\n                            <IoInformationCircleSharp />\n                        </IconContext.Provider>\n                </div>\n            </div>\n            <div>\n                    <Instruction isOpen={infoModal} setIsOpen={setInfoModal}/>\n            </div>\n            <button onClick={mainClick} id={'go'} className={\"button__go\"}>\n                <span style={{position:\"absolute\", top: \"-10px\", left: \"25px\"}}>Go</span>\n            </button>  \n            <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter}/>\n            <div>\n                <Modal open={isOpen} gameScore={gameScore} score={score} playAgain={playAgain} \n                high={high} exitGame={exitGame}/>\n            </div>\n        </div>\n    )\n}\n\nexport default MemoryGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js",["150"],"import React, { useEffect, useRef } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \nimport './Clock.css'; \n\nconst WARNING_THRESHOLD = 30; \nconst ALERT_THRESHOLD = 10; \nconst COLOR_CODES = {\n    info: {\n        color: \"green\"\n    },\n    warning: {\n        color: \"orange\",\n        threshold: WARNING_THRESHOLD\n    }, \n    alert: {\n        color: \"red\",\n        threshold: ALERT_THRESHOLD\n    }\n}; \n\nlet remainingPathColor = COLOR_CODES.info.color\n\nconst Clock = ({time, setTime, counter, setCounter}) => {   \n    const timeLimit = useRef(time); \n\n    function timeRemaining() {\n        const timeLeft = counter/timeLimit.current;\n        return (timeLeft - (1 / timeLimit.current) * (1 - timeLeft));\n    };\n    \n    function setCircleDasharray() {\n        const circleDasharray = `${(\n            timeRemaining() * '283'\n        ).toFixed(0)} 283`;\n        document.getElementById('base-timer-path-remaining')\n                .setAttribute('stroke-dasharray', circleDasharray)\n    };\n\n    function setPathColor(timeLeft) {\n        const {alert, warning} = COLOR_CODES; \n\n        if (timeLeft <= alert.threshold) {\n            remainingPathColor = \"red\";\n        } else if (timeLeft <= warning.threshold) {\n            remainingPathColor = \"orange\"; \n        } else {\n            remainingPathColor = 'green'; \n        }\n    };\n\n    function shake(timeLeft) {\n        const circle = document.querySelector('.base-timer__circle'); \n        if (timeLeft <= 10) {\n            circle.style.animation = \"shake 0.5s cubic-bezier(0.42, 0.0, 0.58, 1.0) both\"; \n            setTimeout(() => {\n                circle.removeAttribute(\"style\"); \n            }, 500);  \n        }\n    }\n    \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);   \n        }, 1000);\n        setCircleDasharray();\n        setPathColor(counter);   \n        setTime(counter);\n        shake(counter); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <div className={\"base-timer\"}>\n           <svg className={\"base-timer__svg\"} viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n               <g className={\"base-timer__circle\"}>\n                   <circle className={\"base-timer__path-elapsed\"} cx=\"50\" cy=\"50\" r=\"45\" />\n                   <path \n                        id=\"base-timer-path-remaining\"\n                        strokeDasharray=\"283\"\n                        className={'base-timer__path-remaining'}\n                        style={{stroke: `${remainingPathColor}`}}\n                        d=\"\n                            M 50, 50\n                            m -45, 0\n                            a 45,45 0 1,0 90,0\n                            a 45,45 0 1,0 -90,0\n                            \"\n                    ></path>\n               </g>\n           </svg>\n           <span className={\"base-timer__label\"}>\n               {timeConversion(time)}\n           </span>\n       </div> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js",["151"],"import React, { useEffect } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \n\nconst Clock = ({setTime, counter, setCounter}) => {   \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);  \n        }, 1000);\n        setTime(timeConversion(counter)); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <>\n       </> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js",["152"],"/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js",["153","154"],"import React, {useRef, useEffect, useState} from 'react'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport {useHistory} from 'react-router-dom'; \nimport './Drawing.css';\nimport { setUser } from '../../store/reducers/session';\nimport board from '../../images/draw_board.png'; \nimport { IoInformationCircleSharp } from \"react-icons/io5\";\nimport { IconContext } from 'react-icons/lib';\nimport Instruction from './Instruction'; \n\nconst Drawing = () => {\n    const user = useSelector(state => state.session.user);\n    const dispatch = useDispatch(); \n    const history = useHistory(); \n    const canvasRef = useRef(null); \n    //this is set to persist data through re-renders \n    const contextRef = useRef(null); \n    //remember that the button is pressed \n    const [isDrawing, setIsDrawing] = useState(false);\n    //saving the canvas image \n    const [image, setImage] = useState({})\n    //modal for information\n    const [isOpen, setIsOpen] = useState(false); \n\n    //access canvas API when component mounts\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        //support higher resolution computers \n        canvas.width = 500;\n        canvas.height = 500;\n        //define 2D api for canvas to draw on\n        const context = canvas.getContext(\"2d\");\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 2; \n        contextRef.current = context; \n    }, [])\n\n    const startDrawing = ({nativeEvent}) => {\n        const {offsetX, offsetY} = nativeEvent;\n        contextRef.current.beginPath(); \n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true); \n        draw(nativeEvent);\n    }\n    const finishDrawing = () => {\n        contextRef.current.closePath(); \n        setIsDrawing(false);\n    }\n    const draw = ({nativeEvent}) => {\n        if (!isDrawing) {\n            return\n        }\n        const {offsetX, offsetY} = nativeEvent;\n        contextRef.current.lineTo(offsetX, offsetY); \n        contextRef.current.stroke(); \n    }\n\n    const changeColor = (e) => {\n        const color = e.target.id; \n        contextRef.current.strokeStyle = color; \n    }\n\n    const changeLine = (e) => {\n        const weight = e.target.value; \n        \n        switch (weight) {\n            case 'light': \n                contextRef.current.lineWidth = 2; \n                break\n            case 'medium': \n                contextRef.current.lineWidth = 5;\n                break\n            case 'heavy': \n                contextRef.current.lineWidth = 10; \n        }\n    }\n\n    const reset = () => {\n        contextRef.current.putImageData(image, 0, 0); \n    }\n\n    const save = () => {\n        setImage(contextRef.current.getImageData(0, 0, \n            contextRef.current.canvas.width, contextRef.current.canvas.height));\n    }\n\n    const info = () => {\n        setIsOpen(true);  \n    }\n\n    const final = async () => {\n        const imageURL = canvasRef.current.toDataURL(); \n        try {\n            const response =  await fetch('/drawing', {\n                method: 'PUT', \n                headers: {\n                    'Content-Type': 'application/json'\n                }, \n                body: JSON.stringify({\n                    email: user.email, \n                    imageURL,\n                })\n            })\n            if (response.ok) {\n                const data = await response.json(); \n                dispatch(setUser(data));\n                history.push('/home');\n            }\n        } catch (err) {\n            console.log(err); \n        }\n    };\n\n    return (\n        <div className={\"page__draw\"}>\n            <div>\n                <img src={board} className={\"container__canvas-board\"}/>\n                <div className={\"container__canvas\"}>\n                    <canvas\n                        onMouseDown={startDrawing}\n                        onMouseUp={finishDrawing}\n                        onMouseMove={draw}\n                        ref={canvasRef}\n                    />\n                </div>\n                <div className={\"container__paint\"}>\n                    <select id={\"line-weight\"} className={\"dropdown\"} onChange={changeLine}>\n                        <option value={'light'}>Light</option>\n                        <option value={'medium'}>Medium</option>\n                        <option value={'heavy'}>Heavy</option>\n                    </select>\n                    <button id={'red'} className={\"paint__red\"} onClick={changeColor}/>\n                    <button id={'green'} className={\"paint__green\"} onClick={changeColor}/>\n                    <button id={'blue'} className={\"paint__blue\"} onClick={changeColor}/>\n                    <button id={'black'} className={\"paint__black\"} onClick={changeColor}/>\n                    <button onClick={reset} className={\"paint__reset\"}>Clear</button>\n                    <button onClick={save} className={\"paint__save\"}>Save</button>\n                </div>\n                    <div onClick={info}>\n                        <IconContext.Provider value={{className: 'paint__info'}}>\n                            <IoInformationCircleSharp />\n                        </IconContext.Provider>\n                    </div>\n                    <div>\n                        <Instruction isOpen={isOpen} setIsOpen={setIsOpen}/>\n                    </div>                \n                    <button onClick={final} className={\"paint__submit\"}>\n                        <span>Submit</span>\n                    </button>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Drawing; ","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalLog.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalSign.js",["155"],"import React, { useEffect } from 'react';\nimport './Auth.css';\n\nconst MODAL_STYLES = {\n    position: 'fixed', \n    top: '50%', \n    left: '50%', \n    borderRadius: '5px',\n    transform: 'translate(-50%, -50%)', \n    backgroundColor: 'rgb(96, 255, 255)', \n    zIndex: 1000,\n    height: '540px',\n    width: '360px'\n}\n\nconst OVERLAY_STYLE = {\n    position: 'fixed', \n    top: 0, \n    left: 0, \n    right: 0, \n    bottom: 0, \n    backgroundColor: 'rgba(0, 0, 0, 0.7)', \n    zIndex: 1000, \n}\n\nconst ModalSign = ({open, children}) => {\n    if (!open) return null;    \n    \n    return (\n        <>\n            <div style={OVERLAY_STYLE} />\n            <div style={MODAL_STYLES}>\n                {children}\n            </div>\n        </>\n    )\n}\n\nexport default ModalSign; ","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Instruction.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Instruction.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Instruction.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/footer/Footer.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashUnAuth.js",["156","157"],"import React from 'react';\nimport './SplashUnAuth.css';\nimport koala from \"../../images/koala.jpg\";\nimport kangaroo from \"../../images/kangaroo.jpg\";\n\n\n\nconst SplashUnAuth = () => {\n    return (\n        <div className={\"page_main\"}>\n            <div className={\"koala_container\"}>\n                <img src={koala} />\n            </div> \n            <div className={\"kangaroo_container\"}>\n                <img src={kangaroo} />\n            </div> \n        </div>\n    )\n}\n\nexport default SplashUnAuth; ",{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":29,"column":6,"nodeType":"164","endLine":29,"endColumn":12,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":63,"column":9,"nodeType":"168","endLine":63,"endColumn":32},{"ruleId":"166","severity":1,"message":"167","line":64,"column":9,"nodeType":"168","endLine":64,"endColumn":26},{"ruleId":"166","severity":1,"message":"167","line":65,"column":9,"nodeType":"168","endLine":65,"endColumn":26},{"ruleId":"166","severity":1,"message":"167","line":66,"column":9,"nodeType":"168","endLine":66,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":122,"column":9,"nodeType":"171","messageId":"172","endLine":123,"endColumn":26},{"ruleId":"173","severity":1,"message":"174","line":39,"column":22,"nodeType":"175","messageId":"176","endLine":39,"endColumn":26},{"ruleId":"177","severity":1,"message":"178","line":80,"column":24,"nodeType":"179","messageId":"176","endLine":80,"endColumn":26},{"ruleId":"162","severity":1,"message":"180","line":130,"column":8,"nodeType":"164","endLine":130,"endColumn":14,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":202,"column":50,"nodeType":"184","messageId":"185","endLine":202,"endColumn":52},{"ruleId":"182","severity":1,"message":"183","line":215,"column":50,"nodeType":"184","messageId":"185","endLine":215,"endColumn":52},{"ruleId":"186","severity":1,"message":"187","line":9,"column":5,"nodeType":"188","messageId":"189","endLine":43,"endColumn":6},{"ruleId":"162","severity":1,"message":"190","line":68,"column":8,"nodeType":"164","endLine":68,"endColumn":16,"suggestions":"191"},{"ruleId":"162","severity":1,"message":"192","line":82,"column":8,"nodeType":"164","endLine":82,"endColumn":14,"suggestions":"193"},{"ruleId":"166","severity":1,"message":"167","line":213,"column":17,"nodeType":"168","endLine":213,"endColumn":68},{"ruleId":"162","severity":1,"message":"194","line":70,"column":8,"nodeType":"164","endLine":70,"endColumn":17,"suggestions":"195"},{"ruleId":"162","severity":1,"message":"196","line":11,"column":8,"nodeType":"164","endLine":11,"endColumn":17,"suggestions":"197"},{"ruleId":"166","severity":1,"message":"167","line":19,"column":21,"nodeType":"168","endLine":19,"endColumn":48},{"ruleId":"186","severity":1,"message":"187","line":67,"column":9,"nodeType":"188","messageId":"189","endLine":76,"endColumn":10},{"ruleId":"166","severity":1,"message":"167","line":118,"column":17,"nodeType":"168","endLine":118,"endColumn":73},{"ruleId":"198","severity":1,"message":"199","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"166","severity":1,"message":"167","line":12,"column":17,"nodeType":"168","endLine":12,"endColumn":36},{"ruleId":"166","severity":1,"message":"167","line":15,"column":17,"nodeType":"168","endLine":15,"endColumn":39},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["204"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has a missing dependency: 'user.email'. Either include it or remove the dependency array.",["205"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'keyFrame'. Either include it or remove the dependency array.",["206"],"React Hook useEffect has a missing dependency: 'colors.length'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has missing dependencies: 'setCircleDasharray', 'setCounter', and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["208"],"React Hook useEffect has missing dependencies: 'setCounter' and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["209"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},"Update the dependencies array to be: [history, user]",{"range":"222","text":"223"},"Update the dependencies array to be: [time, user.email]",{"range":"224","text":"225"},"Update the dependencies array to be: [colors, keyFrame]",{"range":"226","text":"227"},"Update the dependencies array to be: [colors.length, time]",{"range":"228","text":"229"},"Update the dependencies array to be: [counter, setCircleDasharray, setCounter, setTime]",{"range":"230","text":"231"},"Update the dependencies array to be: [counter, setCounter, setTime]",{"range":"232","text":"233"},[1107,1113],"[history, user]",[4698,4704],"[time, user.email]",[2546,2554],"[colors, keyFrame]",[3141,3147],"[colors.length, time]",[2016,2025],"[counter, setCircleDasharray, setCounter, setTime]",[399,408],"[counter, setCounter, setTime]"]