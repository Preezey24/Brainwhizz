[{"/home/rhys/Brainwhizz/react-whizz/src/index.js":"1","/home/rhys/Brainwhizz/react-whizz/src/App.js":"2","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js":"3","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js":"4","/home/rhys/Brainwhizz/react-whizz/src/store/index.js":"5","/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js":"6"},{"size":379,"mtime":1609969876910,"results":"7","hashOfConfig":"8"},{"size":396,"mtime":1609973495430,"results":"9","hashOfConfig":"8"},{"size":0,"mtime":1609961414430,"results":"10","hashOfConfig":"8"},{"size":2222,"mtime":1609975046010,"results":"11","hashOfConfig":"8"},{"size":809,"mtime":1609978488430,"results":"12","hashOfConfig":"8"},{"size":1397,"mtime":1609980754920,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ilkr6e",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/rhys/Brainwhizz/react-whizz/src/index.js",[],["28","29"],"/home/rhys/Brainwhizz/react-whizz/src/App.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/index.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js",["30"],"const SET_USER = 'session/setUser'; \nconst REMOVE_USER = 'session/removeUser'; \n\nconst setUser = (user) => {\n    return {\n        type: SET_USER, \n        payload: user, \n    };\n}; \n\nconst removeUser = () => {\n    return {\n        type: REMOVE_USER, \n    };\n};\n\nexport const signUp = (user) => async (dispatch) => {\n    const { username, email, password, confirm } = user; \n    try {\n        const response = fetch('/auth/signup', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password,\n                confirm,\n            }),\n        });\n        if (response.ok) {\n            const data = await response.json(); \n            dispatch(setUser(data)); \n            return data;  \n        }\n    } catch (err) {\n        return console.log(err.message); \n    }  \n}; \n\nconst initialState = { user: null }; \n\nconst sessionReducer = (state = initialState, action) => {\n    let newState; \n    switch (action.type) {\n        case SET_USER: \n            //create a copy, do not mutate existing to avoid race conditions \n            newState = Object.assign({}, state); \n            newState.user = action.payload; \n            return newState; \n        default: \n            return state; \n    }\n};\n\nexport default sessionReducer; ",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":11,"column":7,"nodeType":"37","messageId":"38","endLine":11,"endColumn":17},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'removeUser' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]