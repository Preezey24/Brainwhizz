[{"/home/rhys/Brainwhizz/react-whizz/src/index.js":"1","/home/rhys/Brainwhizz/react-whizz/src/App.js":"2","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js":"3","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js":"4","/home/rhys/Brainwhizz/react-whizz/src/store/index.js":"5","/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js":"6","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js":"7","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js":"8","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js":"9","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js":"10","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js":"11","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js":"12","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js":"13","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js":"14","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js":"15","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js":"16","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Main.js":"17","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js":"18","/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js":"19","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js":"20","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js":"21","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js":"22","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js":"23","/home/rhys/Brainwhizz/react-whizz/src/components/auth/Modal.js":"24","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js":"25"},{"size":478,"mtime":1610416226499,"results":"26","hashOfConfig":"27"},{"size":1327,"mtime":1610473199510,"results":"28","hashOfConfig":"27"},{"size":1307,"mtime":1610416226489,"results":"29","hashOfConfig":"27"},{"size":2222,"mtime":1609975046010,"results":"30","hashOfConfig":"27"},{"size":848,"mtime":1610416226499,"results":"31","hashOfConfig":"27"},{"size":3298,"mtime":1610416226499,"results":"32","hashOfConfig":"27"},{"size":618,"mtime":1610416226489,"results":"33","hashOfConfig":"27"},{"size":5956,"mtime":1610422940334,"results":"34","hashOfConfig":"27"},{"size":2074,"mtime":1610128491513,"results":"35","hashOfConfig":"27"},{"size":216,"mtime":1610128491513,"results":"36","hashOfConfig":"27"},{"size":6106,"mtime":1610422940334,"results":"37","hashOfConfig":"27"},{"size":678,"mtime":1610128491523,"results":"38","hashOfConfig":"27"},{"size":857,"mtime":1610416226489,"results":"39","hashOfConfig":"27"},{"size":811,"mtime":1610128491523,"results":"40","hashOfConfig":"27"},{"size":678,"mtime":1610128491523,"results":"41","hashOfConfig":"27"},{"size":223,"mtime":1610236844543,"results":"42","hashOfConfig":"27"},{"size":994,"mtime":1610236844543,"results":"43","hashOfConfig":"27"},{"size":253,"mtime":1610236844543,"results":"44","hashOfConfig":"27"},{"size":493,"mtime":1610471951620,"results":"45","hashOfConfig":"27"},{"size":1148,"mtime":1610416226489,"results":"46","hashOfConfig":"27"},{"size":1103,"mtime":1610416226499,"results":"47","hashOfConfig":"27"},{"size":1037,"mtime":1610416226489,"results":"48","hashOfConfig":"27"},{"size":1036,"mtime":1610416226489,"results":"49","hashOfConfig":"27"},{"size":1217,"mtime":1610419908924,"results":"50","hashOfConfig":"27"},{"size":4035,"mtime":1610505212650,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"ilkr6e",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rhys/Brainwhizz/react-whizz/src/index.js",[],["111","112"],"/home/rhys/Brainwhizz/react-whizz/src/App.js",["113"],"import React, { useState, useEffect, useContext } from 'react';\nimport { Switch, Route } from 'react-router-dom'; \nimport { useSelector } from 'react-redux'; \nimport SplashAuth from './components/splash/SplashAuth'; \nimport NavBar from './components/navigation/NavBar';\nimport MathGame from './components/games/math/MathGame';\nimport MemoryGame from './components/games/memory/MemoryGame';\nimport Drawing from './components/drawing/Drawing'; \n\nexport const AuthContext = React.createContext();\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const user = useSelector(state => state.session.user); \n  useEffect(() => {\n    if (user) {\n      setIsAuthenticated(true); \n    }\n  }, [user]);\n\n  return (\n    <>\n      <AuthContext.Provider value={setIsAuthenticated}>\n        <NavBar />\n      </AuthContext.Provider>\n      <Switch>\n        <Route exact path='/'>\n          {isAuthenticated &&\n          <SplashAuth/>\n          }\n        </Route>\n        <Route path='/math'>\n          {isAuthenticated &&\n            <MathGame />\n          }\n        </Route>\n        <Route path='/memory'>\n        {isAuthenticated &&\n          <MemoryGame />\n        }\n        </Route>\n        <Route path='/drawing'>\n            <Drawing /> \n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/index.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js",["114"],"const SET_USER = 'session/setUser'; \nconst REMOVE_USER = 'session/removeUser'; \nconst SET_ERRORS = 'session/setErrors';\nconst REMOVE_ERRORS = 'session/removeErrors'; \n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER, \n        payload: user, \n    };\n}; \n\nconst removeUser = () => {\n    return {\n        type: REMOVE_USER, \n    };\n};\n\nconst setErrors = ({errors}) => {\n    return {\n        type: SET_ERRORS, \n        payload: errors, \n    }\n}\n\nexport const removeErrors = () => {\n    return {\n        type: REMOVE_ERRORS,\n    }\n}\n\nexport const signUp = (user) => async (dispatch) => {\n    const { username, email, password, confirm } = user; \n    try {\n        const response = await fetch('/auth/signup', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password,\n                confirm,\n                math_high: null, \n                math_total: null, \n                memory_high: null,\n                memory_total: null, \n                total_score: null,\n            }),\n        }); \n        if (response.ok) {\n            const data = await response.json();\n            dispatch(setUser(data)); \n        } else {\n            const errors = await response.json(); \n            dispatch(setErrors(errors));\n        }\n    } catch (err) {\n        console.log(err.message);\n    }  \n}; \n\nexport const logIn = (user) => async (dispatch) => {\n    const { email, password } = user;\n    try { \n        const response = await fetch('/auth/login', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        });\n        if (response.ok) {  \n            const data = await response.json(); \n            dispatch(setUser(data)); \n        } else {\n            const errors = await response.json();  \n            dispatch(setErrors(errors));\n        }\n    } catch (err) { \n        console.log(err); \n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    try {\n        const response = await fetch('/auth/logout')\n        if (response.ok) {\n            dispatch(removeUser()); \n        }\n    } catch (err) {\n        console.log(err); \n    }\n}\n\nconst initialState = { user: null, errors: null }; \n\nconst sessionReducer = (state = initialState, action) => {\n    let newState; \n    switch (action.type) {\n        case SET_USER: \n            //create a copy, do not mutate existing to avoid race conditions \n            newState = Object.assign({}, state);\n            newState.errors = null;  \n            newState.user = action.payload; \n            return newState; \n        case REMOVE_USER: \n            newState = Object.assign({}, state); \n            newState.user = null; \n            return newState; \n        case SET_ERRORS: \n            newState = state; \n            newState.errors = action.payload;\n            return newState;\n        case REMOVE_ERRORS: \n            newState = state; \n            newState.errors = action.payload;  \n        default: \n            return state; \n    }\n};\n\nexport default sessionReducer; ","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js",["115","116","117"],"import React, {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport mathProblems from '../../component_utils/math_tables';\nimport { setUser } from '../../../store/reducers/session';\n\n//establish score outside of functional component so that it persists after the components re-renders\n//total score during game session \nlet score = 0;\n//high score during game session \nlet gameScore = 0; \n\nconst MathGame = () => {\n    const history = useHistory(); \n    const dispatch = useDispatch(); \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //math questions & answers \n    const [questions, setQuestions] = useState(mathProblems())\n    const [answers, setAnswers] = useState({});\n    //countdown clock\n    const [time, setTime] = useState('02:00'); \n    const [timeUp, setTimeUp] = useState(false);\n    const [counter, setCounter] = useState(20);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);  \n\n    //calculate the actual answers for comparison with user input \n    let ansArr = []; \n    questions.forEach(question => {\n        let answer = eval(question); \n        ansArr.push(answer);  \n    });\n\n    //update the input answers array as answers are typed in\n    const answerHandler = e => {\n        const { id, value } = e.target; \n        setAnswers(answers => ({\n            ...answers, \n            [id]: value\n        }))  \n    };  \n    \n    //when button is clicked to move onto the next set of math questions \n    const submitHandler = () => {\n        //complete validation that all inputs are filled out before advancing\n        let valArr = Object.values(answers); \n        let exit; \n        if (valArr.length !== 10) return; \n        valArr.forEach(val => {\n            if (!val) {\n                exit = true; \n                //this return is exiting from the callback, not the entire function\n                return; \n            }\n        }); \n        if (exit) {\n            return; \n        }\n\n        //check answers of user input versus correct answers  \n        ansArr.forEach((correct, i) => {\n           if (correct == answers[i]) {\n               gameScore += 1; \n               score += 1; \n           } \n        });  \n\n        //clean up input fields, reset answers and give a new set of questions \n        for (let i = 0; i < 10; i++) {\n            document.getElementById(i).value = null; \n        }\n        setAnswers({}); \n        setQuestions(mathProblems());        \n    }\n\n    //when time runs out and the modal appears, showing your score and asking whether you want to play again\n    //useEffect was used to combat constant re-rendering of the page as state changed\n    useEffect(() => {\n        if (time === '00:00') {\n            //reset state\n            setTimeUp(true); \n            setTime(null); \n            setIsOpen(true); \n            //update score database, check if high score\n            const updateScore = async () => {\n                try {\n                    const response = await fetch('/score/math/high', {\n                        method: 'PUT', \n                        headers: {\n                            'Content-Type': 'application/json'\n                        }, \n                        body: JSON.stringify({\n                            email: user.email, \n                            gameScore,\n                        }),\n                    });\n                    if (response.ok) {\n                        const data = await response.json(); \n                        console.log(data);\n                    }\n                } catch (err) {\n                    console.log(err); \n                }\n            }\n            updateScore(); \n        }\n    }, [time]);\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setAnswers({}); \n        setQuestions(mathProblems()); \n        setTime('02:00');\n        setTimeUp(false); \n        setIsOpen(false); \n        setCounter(20);\n        gameScore = 0; \n        //clean up input fields, reset answers and give a new set of questions \n        for (let i = 0; i < 10; i++) {\n            document.getElementById(i).value = null; \n        }\n    }\n    \n    // when button is clicked on modal to quit game \n    const exitGame = () => {\n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/math', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore = 0;\n        score = 0;\n        history.push('/')\n    }\n    \n    return (\n        <>\n            <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter} />\n            {questions.map((question, i) => {\n                return (\n                    <div key={i}>\n                        {question}\n                        <input type='text' value={answers[i]} onChange={answerHandler} id={i}/>\n                    </div>\n                )\n            })}\n            <button onClick={submitHandler}>Next</button>\n            {timeUp &&\n                <div>\n                    <Modal open={isOpen} gameScore={gameScore} score={score} playAgain={playAgain} exitGame={exitGame}/>\n                </div> \n            }\n        </>\n    )\n}\n\nexport default MathGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js",["118"],"function getRandInt (max) {\n    return Math.floor(Math.random() * max); \n}\n\nfunction mathOp (operation) {\n    let nums; \n    let num1 = 2; \n    let num2 = 3; \n    switch (operation) {\n        case '+':\n            nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                48, 49, 50]\n            num1 = nums[getRandInt(49)];\n            num2 = nums[getRandInt(49)];\n            return `${num1} + ${num2}`; \n        case '-': \n            while (num1 < num2) {\n                nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                    33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                    48, 49, 50] \n                num1 = nums[getRandInt(49)]; \n                num2 = nums[getRandInt(49)]; \n            }\n            return `${num1} - ${num2}`; \n        case '/': \n            while (num1 % num2 !== 0) {\n                let nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                            18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                            48, 49, 50]\n                num1 = nums[getRandInt(49)];\n                num2 = nums[getRandInt(49)];\n            } \n            return `${num1} / ${num2}`; \n        case '*': \n            nums = [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12];  \n            num1 = nums[getRandInt(12)];\n            num2 = nums[getRandInt(12)];\n            return `${num1} * ${num2}`; \n    }\n};\n\nfunction mathProblems () {\n    const ops = ['+', '-', '/', '*']; \n    let qArr = []; \n    for (let i = 0; i < 10; i++) {\n        //establish operation to be used at random\n        const op = ops[getRandInt(4)];\n        qArr.push(mathOp(op)) \n    }\n    return qArr; \n}\n\nexport default mathProblems; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js",["119"],"import React, { useState, useEffect } from 'react'; \nimport {useHistory} from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport Light from './Light'; \nimport Main from './Main'; \nimport { randColor } from '../../component_utils/memory';\nimport './Memory.css'; \nimport { setUser } from '../../../store/reducers/session';\n\n//so data persists passed certain re-rendering\nlet answerArr = []; \n//total score during game session \nlet score = 0;\n//high score during game session \nlet gameScore = 0; \n\nconst MemoryGame = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();  \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //memory light color array, that contains the correct answers\n    const [colors, setColors] = useState([]);  \n    //countdown clock\n    const [time, setTime] = useState('02:00'); \n    const [counter, setCounter] = useState(3);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);  \n\n    //test button click \n    const mainClick = () => {\n        let nextColor = randColor(); \n        while (nextColor === colors[colors.length-1]) {\n            nextColor = randColor(); \n        }\n        setColors([...colors, nextColor]); \n        score++; \n        gameScore++; \n        setCounter(3); \n        answerArr = []; \n        const container = document.getElementById('lights'); \n        container.setAttribute('style', 'display: none;'); \n        const button = document.getElementById('go'); \n        button.setAttribute('style', 'display: none;'); \n    }\n\n    //have the lights appear for the user to select after color transitions complete\n    useEffect(() => {\n        if (time === '00:00') {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n        }\n        if (colors.length === 0) {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    }, [time])\n\n    //color transitiion on light click for the user\n    //make comparison between correct answer and user answer \n    const lightClick = (e) => {\n        const light = document.getElementById(e.target.id); \n        light.animate([{backgroundColor: `${light.id}`}, {backgroundColor: 'white'}, \n                        {backgroundColor: `${light.id}`}], 1500); \n        answerArr.push(light.id);  \n        //check answer\n        answerArr.forEach((answer, i) => {\n            if (answer !== colors[i]) {\n                //update score database, check if high score\n                const updateScore = async () => {\n                    try {\n                        const response = await fetch('/score/memory/high', {\n                            method: 'PUT', \n                            headers: {\n                                'Content-Type': 'application/json'\n                            }, \n                            body: JSON.stringify({\n                                email: user.email, \n                                gameScore,\n                            }),\n                        });\n                        if (response.ok) {\n                            const data = await response.json(); \n                            console.log(data);\n                        }\n                    } catch (err) {\n                        console.log(err); \n                    }\n                }\n                updateScore(); \n                setIsOpen(true); \n            }\n        });\n        //make button appear for next round\n        if (answerArr.length === colors.length) {\n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    };\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setTime('02:00');\n        setIsOpen(false); \n        setCounter(3)\n        gameScore=0; \n        setColors([]); \n    }\n\n    // when button is clicked on modal to quit game \n    const exitGame = () => { \n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/memory', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore = 0;\n        score = 0;\n        history.push('/');\n    }\n    \n    return (\n        <>\n            <Main mainClick={mainClick} colors={colors}/>\n            <div className={\"container__lights\"} id={'lights'}>\n                <Light lightClick={lightClick} id={'red'} style={{backgroundColor: 'red'}}/>\n                <Light lightClick={lightClick} id={'blue'} style={{backgroundColor: 'blue'}}/>\n                <Light lightClick={lightClick} id={'green'} style={{backgroundColor: 'green'}}/>\n                <Light lightClick={lightClick} id={'yellow'} style={{backgroundColor: 'yellow'}}/>\n                <Light lightClick={lightClick} id={'purple'} style={{backgroundColor: 'purple'}}/>\n            </div>\n            <button onClick={mainClick} id={'go'} className={\"button__go\"}>Go</button>  \n            <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter}/>\n            <div>\n                <Modal open={isOpen} score={score} playAgain={playAgain} exitGame={exitGame}/>\n            </div>\n        </>\n    )\n}\n\nexport default MemoryGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js",["120"],"import React, { useEffect } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \n\nconst Clock = ({time, setTime, counter, setCounter}) => {   \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);  \n        }, 1000);\n        setTime(timeConversion(counter)); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <div>\n           <h1>Countdown</h1>\n           <p>\n            <span>\n                Time: \n            </span>\n            <span>\n                {time}  \n            </span>\n           </p>\n       </div> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js",["121"],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Main.js",["122","123"],"import React, {useState, useEffect} from 'react'; \nimport { Style } from 'react-style-tag';\nimport './Memory.css'; \n\nconst Main = ({mainClick, colors}) => {\n    // const [step, setStep] = useState(0);\n    //establish text string to be input into style tag with dynamic update to steps \n    function keyFrameUpdate(colorArr) {\n        let keyFrame = `@keyframes main {`; \n        let step = 0;\n        let transition = 100/colors.length;\n        colorArr.forEach((color) => {\n            if (step === 0) {\n                keyFrame+=`{ ${step}% { background: white; }`\n            }\n            keyFrame+=` ${step+=transition}% { background: ${color}; }`\n        })\n        keyFrame+=` }`\n        return keyFrame;\n    };\n\n    const keyFrameColors = keyFrameUpdate(colors);\n    \n    return (\n        <>        \n            <div className={\"main\"}>\n                <Style> \n                {`${keyFrameColors}`}\n                </Style>\n            </div>\n        </>\n    )\n}\n\nexport default Main; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js",["124","125","126","127"],"import React, {useEffect} from 'react'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport { NavLink, Route } from 'react-router-dom';\nimport './SplashAuth.css'; \n\n\nconst SplashAuth = () => {\n\n    return (\n        <>  \n            <div>\n                <NavLink to='/math'>Math Game</NavLink>\n                <NavLink to='/memory'>Memory Game</NavLink> \n                <NavLink to='/drawing'>Drawing</NavLink> \n            </div>\n        </>\n    )\n}\n\nexport default SplashAuth; ","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js",["128"],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":1,"column":38,"nodeType":"135","messageId":"136","endLine":1,"endColumn":48},{"ruleId":"137","severity":1,"message":"138","line":122,"column":9,"nodeType":"139","messageId":"140","endLine":123,"endColumn":26},{"ruleId":"141","severity":1,"message":"142","line":33,"column":22,"nodeType":"143","messageId":"144","endLine":33,"endColumn":26},{"ruleId":"145","severity":1,"message":"146","line":65,"column":24,"nodeType":"147","messageId":"144","endLine":65,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":110,"column":8,"nodeType":"150","endLine":110,"endColumn":14,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":9,"column":5,"nodeType":"154","messageId":"155","endLine":43,"endColumn":6},{"ruleId":"148","severity":1,"message":"156","line":61,"column":8,"nodeType":"150","endLine":61,"endColumn":14,"suggestions":"157"},{"ruleId":"148","severity":1,"message":"158","line":11,"column":8,"nodeType":"150","endLine":11,"endColumn":17,"suggestions":"159"},{"ruleId":"148","severity":1,"message":"158","line":11,"column":8,"nodeType":"150","endLine":11,"endColumn":17,"suggestions":"160"},{"ruleId":"133","severity":1,"message":"161","line":1,"column":16,"nodeType":"135","messageId":"136","endLine":1,"endColumn":24},{"ruleId":"133","severity":1,"message":"162","line":1,"column":26,"nodeType":"135","messageId":"136","endLine":1,"endColumn":35},{"ruleId":"133","severity":1,"message":"162","line":1,"column":16,"nodeType":"135","messageId":"136","endLine":1,"endColumn":25},{"ruleId":"133","severity":1,"message":"163","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":21},{"ruleId":"133","severity":1,"message":"164","line":2,"column":23,"nodeType":"135","messageId":"136","endLine":2,"endColumn":34},{"ruleId":"133","severity":1,"message":"165","line":3,"column":19,"nodeType":"135","messageId":"136","endLine":3,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":59,"column":9,"nodeType":"154","messageId":"155","endLine":68,"endColumn":10},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.email'. Either include it or remove the dependency array.","ArrayExpression",["168"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'colors.length'. Either include it or remove the dependency array.",["169"],"React Hook useEffect has missing dependencies: 'setCounter' and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["170"],["171"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"176","fix":"178"},"Update the dependencies array to be: [time, user.email]",{"range":"179","text":"180"},"Update the dependencies array to be: [colors.length, time]",{"range":"181","text":"182"},"Update the dependencies array to be: [counter, setCounter, setTime]",{"range":"183","text":"184"},{"range":"185","text":"184"},[3851,3857],"[time, user.email]",[2240,2246],"[colors.length, time]",[405,414],"[counter, setCounter, setTime]",[405,414]]