[{"/home/rhys/Brainwhizz/react-whizz/src/index.js":"1","/home/rhys/Brainwhizz/react-whizz/src/App.js":"2","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js":"3","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js":"4","/home/rhys/Brainwhizz/react-whizz/src/store/index.js":"5","/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js":"6","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js":"7","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js":"8","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js":"9","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js":"10","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js":"11","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js":"12","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js":"13","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js":"14","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js":"15","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js":"16","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Main.js":"17","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js":"18","/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js":"19","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js":"20","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js":"21","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js":"22","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js":"23","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js":"24","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalLog.js":"25","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalSign.js":"26"},{"size":478,"mtime":1610416226499,"results":"27","hashOfConfig":"28"},{"size":1588,"mtime":1610816073116,"results":"29","hashOfConfig":"28"},{"size":2305,"mtime":1610807034996,"results":"30","hashOfConfig":"28"},{"size":3476,"mtime":1610807395826,"results":"31","hashOfConfig":"28"},{"size":848,"mtime":1610416226499,"results":"32","hashOfConfig":"28"},{"size":3298,"mtime":1610416226499,"results":"33","hashOfConfig":"28"},{"size":618,"mtime":1610416226489,"results":"34","hashOfConfig":"28"},{"size":8216,"mtime":1610816018706,"results":"35","hashOfConfig":"28"},{"size":2074,"mtime":1610128491513,"results":"36","hashOfConfig":"28"},{"size":217,"mtime":1610643915137,"results":"37","hashOfConfig":"28"},{"size":6106,"mtime":1610422940334,"results":"38","hashOfConfig":"28"},{"size":3034,"mtime":1610649520747,"results":"39","hashOfConfig":"28"},{"size":873,"mtime":1610644868077,"results":"40","hashOfConfig":"28"},{"size":811,"mtime":1610128491523,"results":"41","hashOfConfig":"28"},{"size":678,"mtime":1610128491523,"results":"42","hashOfConfig":"28"},{"size":223,"mtime":1610236844543,"results":"43","hashOfConfig":"28"},{"size":994,"mtime":1610236844543,"results":"44","hashOfConfig":"28"},{"size":253,"mtime":1610236844543,"results":"45","hashOfConfig":"28"},{"size":928,"mtime":1610506982510,"results":"46","hashOfConfig":"28"},{"size":1475,"mtime":1610818441996,"results":"47","hashOfConfig":"28"},{"size":1131,"mtime":1610817891236,"results":"48","hashOfConfig":"28"},{"size":890,"mtime":1610772529150,"results":"49","hashOfConfig":"28"},{"size":891,"mtime":1610772651980,"results":"50","hashOfConfig":"28"},{"size":4152,"mtime":1610644112807,"results":"51","hashOfConfig":"28"},{"size":1232,"mtime":1610807060486,"results":"52","hashOfConfig":"28"},{"size":765,"mtime":1610773298120,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"ilkr6e",{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},"/home/rhys/Brainwhizz/react-whizz/src/index.js",[],["116","117"],"/home/rhys/Brainwhizz/react-whizz/src/App.js",["118","119","120","121"],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/index.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js",["122"],"const SET_USER = 'session/setUser'; \nconst REMOVE_USER = 'session/removeUser'; \nconst SET_ERRORS = 'session/setErrors';\nconst REMOVE_ERRORS = 'session/removeErrors'; \n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER, \n        payload: user, \n    };\n}; \n\nconst removeUser = () => {\n    return {\n        type: REMOVE_USER, \n    };\n};\n\nconst setErrors = ({errors}) => {\n    return {\n        type: SET_ERRORS, \n        payload: errors, \n    }\n}\n\nexport const removeErrors = () => {\n    return {\n        type: REMOVE_ERRORS,\n    }\n}\n\nexport const signUp = (user) => async (dispatch) => {\n    const { username, email, password, confirm } = user; \n    try {\n        const response = await fetch('/auth/signup', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password,\n                confirm,\n                math_high: null, \n                math_total: null, \n                memory_high: null,\n                memory_total: null, \n                total_score: null,\n            }),\n        }); \n        if (response.ok) {\n            const data = await response.json();\n            dispatch(setUser(data)); \n        } else {\n            const errors = await response.json(); \n            dispatch(setErrors(errors));\n        }\n    } catch (err) {\n        console.log(err.message);\n    }  \n}; \n\nexport const logIn = (user) => async (dispatch) => {\n    const { email, password } = user;\n    try { \n        const response = await fetch('/auth/login', {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        });\n        if (response.ok) {  \n            const data = await response.json(); \n            dispatch(setUser(data)); \n        } else {\n            const errors = await response.json();  \n            dispatch(setErrors(errors));\n        }\n    } catch (err) { \n        console.log(err); \n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    try {\n        const response = await fetch('/auth/logout')\n        if (response.ok) {\n            dispatch(removeUser()); \n        }\n    } catch (err) {\n        console.log(err); \n    }\n}\n\nconst initialState = { user: null, errors: null }; \n\nconst sessionReducer = (state = initialState, action) => {\n    let newState; \n    switch (action.type) {\n        case SET_USER: \n            //create a copy, do not mutate existing to avoid race conditions \n            newState = Object.assign({}, state);\n            newState.errors = null;  \n            newState.user = action.payload; \n            return newState; \n        case REMOVE_USER: \n            newState = Object.assign({}, state); \n            newState.user = null; \n            return newState; \n        case SET_ERRORS: \n            newState = state; \n            newState.errors = action.payload;\n            return newState;\n        case REMOVE_ERRORS: \n            newState = state; \n            newState.errors = action.payload;  \n        default: \n            return state; \n    }\n};\n\nexport default sessionReducer; ","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js",["123","124","125","126","127"],"/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js",["128"],"function getRandInt (max) {\n    return Math.floor(Math.random() * max); \n}\n\nfunction mathOp (operation) {\n    let nums; \n    let num1 = 2; \n    let num2 = 3; \n    switch (operation) {\n        case '+':\n            nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                48, 49, 50]\n            num1 = nums[getRandInt(49)];\n            num2 = nums[getRandInt(49)];\n            return `${num1} + ${num2}`; \n        case '-': \n            while (num1 < num2) {\n                nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                    33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                    48, 49, 50] \n                num1 = nums[getRandInt(49)]; \n                num2 = nums[getRandInt(49)]; \n            }\n            return `${num1} - ${num2}`; \n        case '/': \n            while (num1 % num2 !== 0) {\n                let nums = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n                            18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n                            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n                            48, 49, 50]\n                num1 = nums[getRandInt(49)];\n                num2 = nums[getRandInt(49)];\n            } \n            return `${num1} / ${num2}`; \n        case '*': \n            nums = [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12];  \n            num1 = nums[getRandInt(12)];\n            num2 = nums[getRandInt(12)];\n            return `${num1} * ${num2}`; \n    }\n};\n\nfunction mathProblems () {\n    const ops = ['+', '-', '/', '*']; \n    let qArr = []; \n    for (let i = 0; i < 10; i++) {\n        //establish operation to be used at random\n        const op = ops[getRandInt(4)];\n        qArr.push(mathOp(op)) \n    }\n    return qArr; \n}\n\nexport default mathProblems; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js",["129"],"import React, { useState, useEffect } from 'react'; \nimport {useHistory} from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport Light from './Light'; \nimport Main from './Main'; \nimport { randColor } from '../../component_utils/memory';\nimport './Memory.css'; \nimport { setUser } from '../../../store/reducers/session';\n\n//so data persists passed certain re-rendering\nlet answerArr = []; \n//total score during game session \nlet score = 0;\n//high score during game session \nlet gameScore = 0; \n\nconst MemoryGame = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();  \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //memory light color array, that contains the correct answers\n    const [colors, setColors] = useState([]);  \n    //countdown clock\n    const [time, setTime] = useState('02:00'); \n    const [counter, setCounter] = useState(3);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);  \n\n    //test button click \n    const mainClick = () => {\n        let nextColor = randColor(); \n        while (nextColor === colors[colors.length-1]) {\n            nextColor = randColor(); \n        }\n        setColors([...colors, nextColor]); \n        score++; \n        gameScore++; \n        setCounter(3); \n        answerArr = []; \n        const container = document.getElementById('lights'); \n        container.setAttribute('style', 'display: none;'); \n        const button = document.getElementById('go'); \n        button.setAttribute('style', 'display: none;'); \n    }\n\n    //have the lights appear for the user to select after color transitions complete\n    useEffect(() => {\n        if (time === '00:00') {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n        }\n        if (colors.length === 0) {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    }, [time])\n\n    //color transitiion on light click for the user\n    //make comparison between correct answer and user answer \n    const lightClick = (e) => {\n        const light = document.getElementById(e.target.id); \n        light.animate([{backgroundColor: `${light.id}`}, {backgroundColor: 'white'}, \n                        {backgroundColor: `${light.id}`}], 1500); \n        answerArr.push(light.id);  \n        //check answer\n        answerArr.forEach((answer, i) => {\n            if (answer !== colors[i]) {\n                //update score database, check if high score\n                const updateScore = async () => {\n                    try {\n                        const response = await fetch('/score/memory/high', {\n                            method: 'PUT', \n                            headers: {\n                                'Content-Type': 'application/json'\n                            }, \n                            body: JSON.stringify({\n                                email: user.email, \n                                gameScore,\n                            }),\n                        });\n                        if (response.ok) {\n                            const data = await response.json(); \n                            console.log(data);\n                        }\n                    } catch (err) {\n                        console.log(err); \n                    }\n                }\n                updateScore(); \n                setIsOpen(true); \n            }\n        });\n        //make button appear for next round\n        if (answerArr.length === colors.length) {\n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    };\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setTime('02:00');\n        setIsOpen(false); \n        setCounter(3)\n        gameScore=0; \n        setColors([]); \n    }\n\n    // when button is clicked on modal to quit game \n    const exitGame = () => { \n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/memory', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore = 0;\n        score = 0;\n        history.push('/');\n    }\n    \n    return (\n        <>\n            <Main mainClick={mainClick} colors={colors}/>\n            <div className={\"container__lights\"} id={'lights'}>\n                <Light lightClick={lightClick} id={'red'} style={{backgroundColor: 'red'}}/>\n                <Light lightClick={lightClick} id={'blue'} style={{backgroundColor: 'blue'}}/>\n                <Light lightClick={lightClick} id={'green'} style={{backgroundColor: 'green'}}/>\n                <Light lightClick={lightClick} id={'yellow'} style={{backgroundColor: 'yellow'}}/>\n                <Light lightClick={lightClick} id={'purple'} style={{backgroundColor: 'purple'}}/>\n            </div>\n            <button onClick={mainClick} id={'go'} className={\"button__go\"}>Go</button>  \n            <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter}/>\n            <div>\n                <Modal open={isOpen} score={score} playAgain={playAgain} exitGame={exitGame}/>\n            </div>\n        </>\n    )\n}\n\nexport default MemoryGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js",["130"],"import React, { useEffect, useRef } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \nimport './Clock.css'; \n\nconst WARNING_THRESHOLD = 30; \nconst ALERT_THRESHOLD = 10; \nconst COLOR_CODES = {\n    info: {\n        color: \"green\"\n    },\n    warning: {\n        color: \"orange\",\n        threshold: WARNING_THRESHOLD\n    }, \n    alert: {\n        color: \"red\",\n        threshold: ALERT_THRESHOLD\n    }\n}; \n\nlet remainingPathColor = COLOR_CODES.info.color\n\nconst Clock = ({time, setTime, counter, setCounter}) => {   \n    const timeLimit = useRef(time); \n\n    function timeRemaining() {\n        const timeLeft = counter/timeLimit.current;\n        return (timeLeft - (1 / timeLimit.current) * (1 - timeLeft));\n    };\n    \n    function setCircleDasharray() {\n        const circleDasharray = `${(\n            timeRemaining() * '283'\n        ).toFixed(0)} 283`;\n        document.getElementById('base-timer-path-remaining')\n                .setAttribute('stroke-dasharray', circleDasharray)\n    };\n\n    function setPathColor(timeLeft) {\n        const {alert, warning} = COLOR_CODES; \n\n        if (timeLeft <= alert.threshold) {\n            remainingPathColor = \"red\";\n        } else if (timeLeft <= warning.threshold) {\n            remainingPathColor = \"orange\"; \n        } else {\n            remainingPathColor = 'green'; \n        }\n    };\n\n    function shake(timeLeft) {\n        const circle = document.querySelector('.base-timer__circle'); \n        if (timeLeft <= 10) {\n            circle.style.animation = \"shake 0.5s cubic-bezier(0.42, 0.0, 0.58, 1.0) both\"; \n            setTimeout(() => {\n                circle.removeAttribute(\"style\"); \n            }, 500);  \n        }\n    }\n    \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);   \n        }, 1000);\n        setCircleDasharray();\n        setPathColor(counter);   \n        setTime(counter);\n        shake(counter); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <div className={\"base-timer\"}>\n           <svg className={\"base-timer__svg\"} viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n               <g className={\"base-timer__circle\"}>\n                   <circle className={\"base-timer__path-elapsed\"} cx=\"50\" cy=\"50\" r=\"45\" />\n                   <path \n                        id=\"base-timer-path-remaining\"\n                        strokeDasharray=\"283\"\n                        className={'base-timer__path-remaining'}\n                        style={{stroke: `${remainingPathColor}`}}\n                        d=\"\n                            M 50, 50\n                            m -45, 0\n                            a 45,45 0 1,0 90,0\n                            a 45,45 0 1,0 -90,0\n                            \"\n                    ></path>\n               </g>\n           </svg>\n           <span className={\"base-timer__label\"}>\n               {timeConversion(time)}\n           </span>\n       </div> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js",["131"],"import React, { useEffect } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \n\nconst Clock = ({time, setTime, counter, setCounter}) => {   \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);  \n        }, 1000);\n        setTime(timeConversion(counter)); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <div>\n           <h1>Countdown</h1>\n           <p>\n            <span>\n                Time: \n            </span>\n            <span>\n                {time}  \n            </span>\n           </p>\n       </div> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Main.js",["132","133"],"import React, {useState, useEffect} from 'react'; \nimport { Style } from 'react-style-tag';\nimport './Memory.css'; \n\nconst Main = ({mainClick, colors}) => {\n    // const [step, setStep] = useState(0);\n    //establish text string to be input into style tag with dynamic update to steps \n    function keyFrameUpdate(colorArr) {\n        let keyFrame = `@keyframes main {`; \n        let step = 0;\n        let transition = 100/colors.length;\n        colorArr.forEach((color) => {\n            if (step === 0) {\n                keyFrame+=`{ ${step}% { background: white; }`\n            }\n            keyFrame+=` ${step+=transition}% { background: ${color}; }`\n        })\n        keyFrame+=` }`\n        return keyFrame;\n    };\n\n    const keyFrameColors = keyFrameUpdate(colors);\n    \n    return (\n        <>        \n            <div className={\"main\"}>\n                <Style> \n                {`${keyFrameColors}`}\n                </Style>\n            </div>\n        </>\n    )\n}\n\nexport default Main; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js",["134","135","136","137"],"import React, {useEffect} from 'react'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport { NavLink, Route } from 'react-router-dom';\nimport './SplashAuth.css'; \n\n\nconst SplashAuth = () => {\n\n    return (\n        <>  \n            <div>\n                <NavLink to='/math'>Math Game</NavLink>\n                <NavLink to='/memory'>Memory Game</NavLink> \n            </div>\n        </>\n    )\n}\n\nexport default SplashAuth; ","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js",["138"],"import React, {useRef, useEffect, useState} from 'react'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport {useHistory} from 'react-router-dom'; \nimport './Drawing.css';\nimport { setUser } from '../../store/reducers/session';\n\nconst Drawing = () => {\n    const user = useSelector(state => state.session.user);\n    const dispatch = useDispatch(); \n    const history = useHistory(); \n    const canvasRef = useRef(null); \n    //this is set to persist data through re-renders \n    const contextRef = useRef(null); \n    //remember that the button is pressed \n    const [isDrawing, setIsDrawing] = useState(false);\n    //saving the canvas image \n    const [image, setImage] = useState({})\n\n    //access canvas API when component mounts\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        //support higher resolution computers \n        canvas.width = 500;\n        canvas.height = 500;\n        //define 2D api for canvas to draw on\n        const context = canvas.getContext(\"2d\");\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 2; \n        contextRef.current = context; \n    }, [])\n\n    const startDrawing = ({nativeEvent}) => {\n        const {offsetX, offsetY} = nativeEvent;\n        contextRef.current.beginPath(); \n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true); \n        draw(nativeEvent);\n    }\n    const finishDrawing = () => {\n        contextRef.current.closePath(); \n        setIsDrawing(false);\n    }\n    const draw = ({nativeEvent}) => {\n        if (!isDrawing) {\n            return\n        }\n        const {offsetX, offsetY} = nativeEvent;\n        contextRef.current.lineTo(offsetX, offsetY); \n        contextRef.current.stroke(); \n    }\n\n    const changeColor = (e) => {\n        const color = e.target.id; \n        contextRef.current.strokeStyle = color; \n    }\n\n    const changeLine = (e) => {\n        const weight = e.target.value; \n        \n        switch (weight) {\n            case 'light': \n                contextRef.current.lineWidth = 2; \n                break\n            case 'medium': \n                contextRef.current.lineWidth = 5;\n                break\n            case 'heavy': \n                contextRef.current.lineWidth = 10; \n        }\n    }\n\n    const reset = () => {\n        contextRef.current.putImageData(image, 0, 0); \n    }\n\n    const save = () => {\n        setImage(contextRef.current.getImageData(0, 0, \n            contextRef.current.canvas.width, contextRef.current.canvas.height));\n    }\n\n    const final = async () => {\n        const imageURL = canvasRef.current.toDataURL(); \n        try {\n            const response =  await fetch('/drawing', {\n                method: 'PUT', \n                headers: {\n                    'Content-Type': 'application/json'\n                }, \n                body: JSON.stringify({\n                    email: user.email, \n                    imageURL,\n                })\n            })\n            if (response.ok) {\n                const data = await response.json(); \n                dispatch(setUser(data));\n                history.push('/');\n            }\n        } catch (err) {\n            console.log(err); \n        }\n    };\n\n    return (\n        <>\n            <canvas\n                style={{border: \"black solid\"}}\n                onMouseDown={startDrawing}\n                onMouseUp={finishDrawing}\n                onMouseMove={draw}\n                ref={canvasRef}\n            />\n            <select id={\"line-weight\"} onChange={changeLine}>\n                <option value={'light'}>Light</option>\n                <option value={'medium'}>Medium</option>\n                <option value={'heavy'}>Heavy</option>\n            </select>\n            <button id={'red'} onClick={changeColor}>Red</button>\n            <button id={'green'} onClick={changeColor}>Green</button>\n            <button id={'blue'} onClick={changeColor}>Blue</button>\n            <button onClick={reset}>Reset</button>\n            <button onClick={save}>Save</button>\n            <button onClick={final}>Final Submit</button>\n        </>\n    )\n}\n\n\nexport default Drawing; ","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalLog.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalSign.js",["139"],"import React, { useEffect } from 'react';\nimport './Auth.css';\n\nconst MODAL_STYLES = {\n    position: 'fixed', \n    top: '50%', \n    left: '50%', \n    borderRadius: '5px',\n    transform: 'translate(-50%, -50%)', \n    backgroundColor: 'rgb(96, 255, 255)', \n    zIndex: 1000,\n    height: '540px',\n    width: '360px'\n}\n\nconst OVERLAY_STYLE = {\n    position: 'fixed', \n    top: 0, \n    left: 0, \n    right: 0, \n    bottom: 0, \n    backgroundColor: 'rgba(0, 0, 0, 0.7)', \n    zIndex: 1000, \n}\n\nconst ModalSign = ({open, children}) => {\n    if (!open) return null;    \n    \n    return (\n        <>\n            <div style={OVERLAY_STYLE} />\n            <div style={MODAL_STYLES}>\n                {children}\n            </div>\n        </>\n    )\n}\n\nexport default ModalSign; ",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":17,"column":10,"nodeType":"146","messageId":"147","endLine":17,"endColumn":19},{"ruleId":"144","severity":1,"message":"148","line":17,"column":21,"nodeType":"146","messageId":"147","endLine":17,"endColumn":33},{"ruleId":"149","severity":1,"message":"150","line":52,"column":9,"nodeType":"151","endLine":52,"endColumn":32},{"ruleId":"149","severity":1,"message":"150","line":53,"column":9,"nodeType":"151","endLine":53,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":122,"column":9,"nodeType":"154","messageId":"155","endLine":123,"endColumn":26},{"ruleId":"156","severity":1,"message":"157","line":32,"column":22,"nodeType":"158","messageId":"159","endLine":32,"endColumn":26},{"ruleId":"160","severity":1,"message":"161","line":73,"column":24,"nodeType":"162","messageId":"159","endLine":73,"endColumn":26},{"ruleId":"163","severity":1,"message":"164","line":122,"column":8,"nodeType":"165","endLine":122,"endColumn":14,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":189,"column":50,"nodeType":"169","messageId":"170","endLine":189,"endColumn":52},{"ruleId":"167","severity":1,"message":"168","line":202,"column":50,"nodeType":"169","messageId":"170","endLine":202,"endColumn":52},{"ruleId":"171","severity":1,"message":"172","line":9,"column":5,"nodeType":"173","messageId":"174","endLine":43,"endColumn":6},{"ruleId":"163","severity":1,"message":"175","line":61,"column":8,"nodeType":"165","endLine":61,"endColumn":14,"suggestions":"176"},{"ruleId":"163","severity":1,"message":"177","line":70,"column":8,"nodeType":"165","endLine":70,"endColumn":17,"suggestions":"178"},{"ruleId":"163","severity":1,"message":"179","line":11,"column":8,"nodeType":"165","endLine":11,"endColumn":17,"suggestions":"180"},{"ruleId":"144","severity":1,"message":"181","line":1,"column":16,"nodeType":"146","messageId":"147","endLine":1,"endColumn":24},{"ruleId":"144","severity":1,"message":"182","line":1,"column":26,"nodeType":"146","messageId":"147","endLine":1,"endColumn":35},{"ruleId":"144","severity":1,"message":"182","line":1,"column":16,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"183","line":2,"column":23,"nodeType":"146","messageId":"147","endLine":2,"endColumn":34},{"ruleId":"144","severity":1,"message":"184","line":3,"column":19,"nodeType":"146","messageId":"147","endLine":3,"endColumn":24},{"ruleId":"149","severity":1,"message":"150","line":14,"column":17,"nodeType":"151","endLine":14,"endColumn":38},{"ruleId":"171","severity":1,"message":"172","line":61,"column":9,"nodeType":"173","messageId":"174","endLine":70,"endColumn":10},{"ruleId":"144","severity":1,"message":"182","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'setIsLoading' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.email'. Either include it or remove the dependency array.","ArrayExpression",["187"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'colors.length'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has missing dependencies: 'setCircleDasharray', 'setCounter', and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["189"],"React Hook useEffect has missing dependencies: 'setCounter' and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["190"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [time, user.email]",{"range":"199","text":"200"},"Update the dependencies array to be: [colors.length, time]",{"range":"201","text":"202"},"Update the dependencies array to be: [counter, setCircleDasharray, setCounter, setTime]",{"range":"203","text":"204"},"Update the dependencies array to be: [counter, setCounter, setTime]",{"range":"205","text":"206"},[4351,4357],"[time, user.email]",[2240,2246],"[colors.length, time]",[2016,2025],"[counter, setCircleDasharray, setCounter, setTime]",[405,414],"[counter, setCounter, setTime]"]