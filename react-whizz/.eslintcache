[{"/home/rhys/Brainwhizz/react-whizz/src/index.js":"1","/home/rhys/Brainwhizz/react-whizz/src/App.js":"2","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js":"3","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js":"4","/home/rhys/Brainwhizz/react-whizz/src/store/index.js":"5","/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js":"6","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js":"7","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js":"8","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js":"9","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js":"10","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js":"11","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js":"12","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js":"13","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js":"14","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js":"15","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js":"16","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js":"17","/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js":"18","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js":"19","/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js":"20","/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js":"21","/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js":"22","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js":"23","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalLog.js":"24","/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalSign.js":"25","/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Instruction.js":"26","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Instruction.js":"27","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Instruction.js":"28","/home/rhys/Brainwhizz/react-whizz/src/components/footer/Footer.js":"29","/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashUnAuth.js":"30"},{"size":478,"mtime":1610416226499,"results":"31","hashOfConfig":"32"},{"size":2288,"mtime":1612635723159,"results":"33","hashOfConfig":"32"},{"size":2802,"mtime":1610826445546,"results":"34","hashOfConfig":"32"},{"size":3476,"mtime":1610807395826,"results":"35","hashOfConfig":"32"},{"size":848,"mtime":1610994747060,"results":"36","hashOfConfig":"32"},{"size":3317,"mtime":1611793194131,"results":"37","hashOfConfig":"32"},{"size":724,"mtime":1610821585556,"results":"38","hashOfConfig":"32"},{"size":9339,"mtime":1612624937389,"results":"39","hashOfConfig":"32"},{"size":2110,"mtime":1611792382051,"results":"40","hashOfConfig":"32"},{"size":217,"mtime":1610643915137,"results":"41","hashOfConfig":"32"},{"size":11602,"mtime":1612634500699,"results":"42","hashOfConfig":"32"},{"size":3034,"mtime":1610649520747,"results":"43","hashOfConfig":"32"},{"size":705,"mtime":1611672558506,"results":"44","hashOfConfig":"32"},{"size":702,"mtime":1611672580336,"results":"45","hashOfConfig":"32"},{"size":479,"mtime":1610935792366,"results":"46","hashOfConfig":"32"},{"size":223,"mtime":1610236844543,"results":"47","hashOfConfig":"32"},{"size":253,"mtime":1610236844543,"results":"48","hashOfConfig":"32"},{"size":5079,"mtime":1613238078018,"results":"49","hashOfConfig":"32"},{"size":1556,"mtime":1610998087580,"results":"50","hashOfConfig":"32"},{"size":1233,"mtime":1611886780470,"results":"51","hashOfConfig":"32"},{"size":890,"mtime":1610772529150,"results":"52","hashOfConfig":"32"},{"size":891,"mtime":1610772651980,"results":"53","hashOfConfig":"32"},{"size":5760,"mtime":1612632058709,"results":"54","hashOfConfig":"32"},{"size":1232,"mtime":1610823726666,"results":"55","hashOfConfig":"32"},{"size":750,"mtime":1611792214061,"results":"56","hashOfConfig":"32"},{"size":1508,"mtime":1611677871576,"results":"57","hashOfConfig":"32"},{"size":1452,"mtime":1611633070820,"results":"58","hashOfConfig":"32"},{"size":1579,"mtime":1611632778530,"results":"59","hashOfConfig":"32"},{"size":1978,"mtime":1612645100119,"results":"60","hashOfConfig":"32"},{"size":3615,"mtime":1613241836228,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"ilkr6e",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},"/home/rhys/Brainwhizz/react-whizz/src/index.js",[],["129","130"],"/home/rhys/Brainwhizz/react-whizz/src/App.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginForm.js",[],["131","132"],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpForm.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/index.js",[],"/home/rhys/Brainwhizz/react-whizz/src/store/reducers/session.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LogoutButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/math/MathGame.js",["133","134","135","136","137"],"import React, {useState, useEffect, useRef} from 'react';\nimport {useHistory} from 'react-router-dom'; \nimport { useSelector, useDispatch } from 'react-redux'; \nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport mathProblems from '../../component_utils/math_tables';\nimport { setUser } from '../../../store/reducers/session';\nimport './MathGame.css'; \nimport { IconContext } from 'react-icons/lib';\nimport { IoInformationCircleSharp } from \"react-icons/io5\";\nimport Instruction from './Instruction'; \n\nconst MathGame = () => {\n    //useRef for the score components so that they do not update on re-render\n    const gameScore = useRef(0);\n    const score = useRef(0); \n     \n    const history = useHistory(); \n    const dispatch = useDispatch(); \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //math questions & answers \n    const [questions, setQuestions] = useState(mathProblems())\n    const [answers, setAnswers] = useState({});\n    //countdown clock\n    const [time, setTime] = useState(60); \n    const [timeUp, setTimeUp] = useState(false);\n    const [counter, setCounter] = useState(60);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);  \n    //high score\n    const [high, setHigh] = useState({});\n    //instruction modal \n    const [infoModal, setInfoModal] = useState(false); \n\n    //calculate the actual answers for comparison with user input \n    let ansArr = []; \n    questions.forEach(question => {\n        let answer = eval(question); \n        ansArr.push(answer);  \n    });\n\n    //update the input answers array as answers are typed in\n    const answerHandler = e => {\n        const { id, value } = e.target; \n        setAnswers(answers => ({\n            ...answers, \n            [id]: value\n        }))  \n    };  \n\n    //change submithandler below from red to green once all input fields filled out\n    useEffect(() => {\n        let valArr = Object.values(answers); \n        if (valArr.length === 10) {\n            const go = document.querySelector('.questions__button');\n            go.style.backgroundColor = 'rgb(60, 255, 0)';\n        }\n    }, [answers])\n    \n    //when button is clicked to move onto the next set of math questions \n    const submitHandler = () => {\n        //complete validation that all inputs are filled out before advancing\n        let valArr = Object.values(answers); \n        let exit; \n        if (valArr.length !== 10) return; \n        valArr.forEach(val => {\n            if (!val) {\n                exit = true; \n                //this return is exiting from the callback, not the entire function\n                return; \n            }\n        }); \n        if (exit) {\n            return; \n        }\n\n        //check answers of user input versus correct answers  \n        ansArr.forEach((correct, i) => {\n            if (correct == answers[i]) {\n                gameScore.current += 1; \n                score.current += 1;\n            } \n        });  \n        move(); \n\n        //clean up input fields, reset answers and give a new set of questions \n        for (let i = 0; i < 10; i++) {\n            document.getElementById(i).value = null; \n        }\n        setAnswers({}); \n        setQuestions(mathProblems()); \n        //reset button color to red\n        const go = document.querySelector('.questions__button');\n        go.style.backgroundColor = 'red';      \n    }\n\n    //when time runs out and the modal appears, showing your score and asking whether you want to play again\n    //useEffect was used to combat constant re-rendering of the page as state changed\n    useEffect(() => {\n        if (time === 0) {\n            //reset state\n            setTimeUp(true); \n            setTime(null); \n            setIsOpen(true); \n            //update score database, check if high score\n            const updateScore = async () => {\n                try {\n                    const response = await fetch('/score/math/high', {\n                        method: 'PUT', \n                        headers: {\n                            'Content-Type': 'application/json'\n                        }, \n                        body: JSON.stringify({\n                            email: user.email, \n                            gameScore: gameScore.current,\n                        }),\n                    });\n                    if (response.ok) {\n                        if (response.status === 204) return;\n                        const data = await response.json(); \n                        setHigh(data); \n                    }\n                } catch (err) {\n                    console.log(err); \n                }\n            }\n            updateScore(); \n        }\n    }, [time]);\n\n    const info = () => {\n        setInfoModal(true);  \n    }\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setAnswers({}); \n        setQuestions(mathProblems()); \n        setTime(60);\n        setTimeUp(false); \n        setIsOpen(false); \n        setCounter(60);\n        setHigh({});\n        gameScore.current = 0; \n        //clean up input fields, reset answers and give a new set of questions \n        for (let i = 0; i < 10; i++) {\n            document.getElementById(i).value = null; \n        }\n    }\n    \n    // when button is clicked on modal to quit game \n    const exitGame = () => {\n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/math', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score: score.current, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore.current = 0;\n        score.current = 0;\n        history.push('/home')\n    }\n\n    //animate div movement from right to left, as if it were being replaced \n    function move() {\n        const container = document.querySelector('.chalkboard__div'); \n        container.style.animation = \"move 2s linear\"; \n        setTimeout(() => {\n            container.style.opacity = 0; \n        }, 667);\n        setTimeout(() => {\n            container.style.opacity = 1; \n        }, 1334);\n        setTimeout(() => {\n            container.style.removeProperty('animation'); \n        }, 2000)\n    };\n    \n    return (\n        <div className={\"page__math\"}>\n            <div className={\"chalkboard_container\"}>\n                <button className={\"questions_math__button\"} onClick={submitHandler}>GO >>></button>\n                <div className={\"chalkboard__div\"}>\n                    <h2 className={\"chalkboard__heading\"}>Math Questions</h2>\n                    <div className={\"questions__div_one\"}>\n                        {questions.map((question, i) => {\n                            if (i < 5) {\n                                return (\n                                        <div className={\"questions__question\"} key={i}>\n                                            {`${question} = `}\n                                            <input className={\"questions__answer\"} type='text' value={answers[i]} \n                                            onChange={answerHandler} id={i}/>\n                                        </div>\n                                )\n                            }\n                        })}\n                    </div>\n                    <div className={\"questions__div_two\"}>\n                        {questions.map((question, i) => {\n                            if (i >= 5) {\n                                return (\n                                    <div className={\"questions__question\"} key={i}>\n                                            {`${question} = `}\n                                            <input className={\"questions__answer\"} type='text' value={answers[i]} \n                                            onChange={answerHandler} id={i}/>\n                                        </div>\n                                )\n                            }\n                        })}\n                    </div>\n                    <div onClick={info}>\n                            <IconContext.Provider value={{className: 'math__info'}}>\n                                <IoInformationCircleSharp />\n                            </IconContext.Provider>\n                    </div>\n                </div>\n            </div>\n            <div className={\"clock_container\"}>\n                <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter} />\n            </div>\n            <div>\n                    <Instruction isOpen={infoModal} setIsOpen={setInfoModal}/>\n            </div>\n            {timeUp &&\n                <div>\n                    <Modal open={isOpen} gameScore={gameScore} score={score} playAgain={playAgain} \n                    high={high} exitGame={exitGame}/>\n                </div> \n            }\n        </div>\n    )\n}\n\nexport default MathGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/math_tables.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/clock_helper.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/MemoryGame.js",["138","139"],"import React, { useState, useEffect, useRef } from 'react'; \nimport {useHistory} from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Clock from './Clock'; \nimport Modal from './Modal'; \nimport Light from './Light';  \nimport { randColor } from '../../component_utils/memory';\nimport './Memory.css'; \nimport { setUser } from '../../../store/reducers/session';\nimport {IconContext} from \"react-icons\"; \nimport {FcElectronics} from 'react-icons/fc';\nimport {IoLogoXbox} from 'react-icons/io5'; \nimport {VscDashboard} from 'react-icons/vsc'; \nimport turret from '../../../images/turret.png';\nimport {AiFillFire} from 'react-icons/ai'; \nimport { IoInformationCircleSharp } from \"react-icons/io5\";\nimport Instruction from './Instruction'; \n\n//so data persists passed certain re-rendering\nlet answerArr = []; \n\nconst MemoryGame = () => {\n    //useRef for the score components so that they do not update on re-render\n    const gameScore = useRef(-1);\n    const score = useRef(-1);\n\n    const history = useHistory();\n    const dispatch = useDispatch();  \n    //validate user is authenticated\n    const user = useSelector(state => state.session.user);\n    //memory light color array, that contains the correct answers\n    const [colors, setColors] = useState([]);  \n    //set keyframes \n    const [keyFrame, setKeyFrame] = useState([]); \n    //countdown clock\n    const [time, setTime] = useState('00:03'); \n    const [counter, setCounter] = useState(3);\n    //modal states \n    const [isOpen, setIsOpen] = useState(false);\n    //high score \n    const [high, setHigh] = useState({});\n    //instruction modal \n    const [infoModal, setInfoModal] = useState(false); \n\n    //test button click \n    const mainClick = () => {\n        let nextColor = randColor(); \n        while (nextColor === colors[colors.length-1]) {\n            nextColor = randColor(); \n        }\n        setColors([...colors, nextColor]); \n        score.current += 1; \n        gameScore.current += 1; \n        setCounter(3); \n        answerArr = [];\n        //keyframe animations for color dynamic transitions \n        setKeyFrame([...keyFrame, {backgroundColor: `${nextColor}`}]);\n\n        const container = document.getElementById('lights'); \n        container.setAttribute('style', 'display: none;'); \n        const button = document.getElementById('go'); \n        button.setAttribute('style', 'display: none;'); \n    }\n    \n    useEffect(() => {\n        const main = document.getElementById(\"main_light\");\n        main.animate(keyFrame, 3000); \n    }, [colors])\n\n    //have the lights appear for the user to select after color transitions complete\n    useEffect(() => {\n        if (time === '00:00') {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n        }\n        if (colors.length === 0) {\n            const container = document.getElementById('lights'); \n            container.setAttribute('style', 'display: block;'); \n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    }, [time])\n\n    //color transitiion on light click for the user\n    //make comparison between correct answer and user answer \n    const lightClick = (e) => {\n        const light = document.getElementById(e.target.id); \n        light.animate([{backgroundColor: `${light.id}`}, {backgroundColor: 'white'}, \n                        {backgroundColor: `${light.id}`}], 600); \n        answerArr.push(light.id);\n        //activate laser one\n        const laserOne = document.getElementById(\"laserOne\");\n        const flameOne = document.getElementById(\"flameOne\");  \n        laserOne.setAttribute(\"stroke\", light.id); \n        let lengthOne = 0; \n        let lineDashArrayOne;\n        const laserAdvanceOne = setInterval(() => {\n            lineDashArrayOne = `${lengthOne += 28} 140`;\n            laserOne.setAttribute(\"stroke-dasharray\", lineDashArrayOne);\n        }, 100);\n        setTimeout(() => {\n            clearInterval(laserAdvanceOne);\n            laserOne.setAttribute(\"stroke-dasharray\", \"0 140\");\n            flameOne.style.display = \"block\"; \n        }, 600);\n        setTimeout(() => {\n            flameOne.style.display = \"none\"; \n        }, 800)\n\n        //activate laser two\n        const laserTwo = document.getElementById(\"laserTwo\");\n        const flameTwo = document.getElementById(\"flameTwo\");\n        laserTwo.setAttribute(\"stroke\", light.id); \n        let lengthTwo = 0; \n        let lineDashArrayTwo;\n        const laserAdvanceTwo = setInterval(() => {\n            lineDashArrayTwo = `${lengthTwo += 28} 140`;\n            laserTwo.setAttribute(\"stroke-dasharray\", lineDashArrayTwo);\n        }, 100);\n        setTimeout(() => {\n            clearInterval(laserAdvanceTwo);\n            laserTwo.setAttribute(\"stroke-dasharray\", \"0 140\"); \n            flameTwo.style.display = \"block\";\n        }, 600);\n        setTimeout(() => {\n            flameTwo.style.display = \"none\"; \n        }, 800)\n        \n        //check answer\n        answerArr.forEach((answer, i) => {\n            if (answer !== colors[i]) {\n                //update score database, check if high score\n                const updateScore = async () => {\n                    try {\n                        const response = await fetch('/score/memory/high', {\n                            method: 'PUT', \n                            headers: {\n                                'Content-Type': 'application/json'\n                            }, \n                            body: JSON.stringify({\n                                email: user.email, \n                                gameScore: gameScore.current,\n                            }),\n                        });\n                        if (response.ok) {  \n                            if (response.status === 204) return; \n                            const data = await response.json(); \n                            setHigh(data); \n                        }\n                    } catch (err) {\n                        console.log(err); \n                    }\n                }\n                updateScore(); \n                setIsOpen(true); \n            }\n        });\n        //make button appear for next round\n        if (answerArr.length === colors.length) {\n            const button = document.getElementById('go'); \n            button.setAttribute('style', 'display: block;'); \n        }\n    };\n\n    const info = () => {\n        setInfoModal(true);  \n    }\n\n    //when button is clicked on modal to play again \n    const playAgain = () => {\n        //reset everything for new game\n        setTime('00:03');\n        setIsOpen(false); \n        setCounter(3)\n        gameScore.current = 0; \n        setColors([]); \n        setKeyFrame([]); \n        setHigh({}); \n    }\n\n    // when button is clicked on modal to quit game \n    const exitGame = () => { \n        const updateScore = async () => {\n            try {\n                const response = await fetch('/score/memory', {\n                    method: 'PUT', \n                    headers: {\n                        'Content-Type': 'application/json'\n                    }, \n                    body: JSON.stringify({\n                        email: user.email, \n                        score: score.current, \n                    }),\n                });\n                if (response.ok) {\n                    const data = await response.json(); \n                    dispatch(setUser(data)); \n                }\n            } catch (err) {\n                console.log(err); \n            }\n        }\n        updateScore(); \n        gameScore.current = 0;\n        score.current = 0;\n        history.push('/home');\n    }\n    \n    return (\n        <div className={\"page__memory\"}>\n            <div className={\"memory_container\"}>\n                <div className={\"main\"} id={\"main_light\"}/>\n                <div className={\"container__lights\"} id={'lights'}>\n                    <img src={turret} className={\"container__turret\"} alt=\"\"/>\n                    <div className={\"container__laser-one-div\"}>\n                        <svg className={\"container__laser-one-svg\"} xmlns=\"http://www.w3.org/2000/svg\">\n                            <line id={\"laserOne\"} className={\"container__laser-beam\"} x1=\"0\" y1=\"140\" x2=\"0\" y2=\"0\" \n                            strokeDasharray=\"0 140\"/>\n                        </svg>\n                    </div>\n                    <div className={\"container__laser-two-div\"}>\n                        <svg className={\"container__laser-two-svg\"} xmlns=\"http://www.w3.org/2000/svg\">\n                            <line id={\"laserTwo\"} className={\"container__laser-beam\"} x1=\"0\" y1=\"140\" x2=\"0\" y2=\"0\" \n                            strokeDasharray=\"0 140\"/>\n                        </svg>\n                    </div>\n                    <FcElectronics className={\"container__electronics\"}/>\n                    <IoLogoXbox className={\"container__xbox\"}/>\n                    <div className={\"container__xbox-dot\"}></div>\n                    <VscDashboard className={\"container__dashboard\"}/>\n                    <div id={\"flameOne\"} className={\"container__flame-divOne\"}>\n                        <IconContext.Provider value={{color:\"orange\", size: \"40px\"}}>\n                            <AiFillFire/>\n                        </IconContext.Provider>\n                    </div>\n                    <div id={\"flameTwo\"} className={\"container__flame-divTwo\"}>\n                        <IconContext.Provider value={{color:\"orange\", size: \"40px\"}}>\n                            <AiFillFire/>\n                        </IconContext.Provider>\n                    </div>\n                    <Light lightClick={lightClick} id={'red'} style={{backgroundColor: 'red',\n                    position: 'absolute', top: '210px', left: '230px'}}/>\n                    <Light lightClick={lightClick} id={'blue'} style={{backgroundColor: 'blue',\n                    position: 'absolute', top: '210px', left: '-140px'}}/>\n                    <Light lightClick={lightClick} id={'green'} style={{backgroundColor: 'green', \n                    position: 'absolute', top: '120px', left: '-40px', width: \"80px\", height: \"80px\"}}/>\n                    <Light lightClick={lightClick} id={'yellow'} style={{backgroundColor: 'yellow',\n                    position: 'absolute', top: '120px', left: '140px', width: \"80px\", height: \"80px\"}}/>\n                    <Light lightClick={lightClick} id={'purple'} style={{backgroundColor: 'purple',\n                    position: 'absolute', top: '210px', left: '40px'}}/>\n                    <div onClick={info}>\n                            <IconContext.Provider value={{className: 'memory__info'}}>\n                                <IoInformationCircleSharp />\n                            </IconContext.Provider>\n                    </div>\n                </div>\n                <div>\n                        <Instruction isOpen={infoModal} setIsOpen={setInfoModal}/>\n                </div>\n                <button onClick={mainClick} id={'go'} className={\"button__go\"}>\n                    <span style={{position:\"absolute\", top: \"-10px\", left: \"25px\"}}>Go</span>\n                </button>  \n                <Clock time={time} setTime={setTime} counter={counter} setCounter={setCounter}/>\n                <div>\n                    <Modal open={isOpen} gameScore={gameScore} score={score} playAgain={playAgain} \n                    high={high} exitGame={exitGame}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MemoryGame; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Clock.js",["140"],"import React, { useEffect, useRef } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \nimport './Clock.css'; \n\nconst WARNING_THRESHOLD = 30; \nconst ALERT_THRESHOLD = 10; \nconst COLOR_CODES = {\n    info: {\n        color: \"green\"\n    },\n    warning: {\n        color: \"orange\",\n        threshold: WARNING_THRESHOLD\n    }, \n    alert: {\n        color: \"red\",\n        threshold: ALERT_THRESHOLD\n    }\n}; \n\nlet remainingPathColor = COLOR_CODES.info.color\n\nconst Clock = ({time, setTime, counter, setCounter}) => {   \n    const timeLimit = useRef(time); \n\n    function timeRemaining() {\n        const timeLeft = counter/timeLimit.current;\n        return (timeLeft - (1 / timeLimit.current) * (1 - timeLeft));\n    };\n    \n    function setCircleDasharray() {\n        const circleDasharray = `${(\n            timeRemaining() * '283'\n        ).toFixed(0)} 283`;\n        document.getElementById('base-timer-path-remaining')\n                .setAttribute('stroke-dasharray', circleDasharray)\n    };\n\n    function setPathColor(timeLeft) {\n        const {alert, warning} = COLOR_CODES; \n\n        if (timeLeft <= alert.threshold) {\n            remainingPathColor = \"red\";\n        } else if (timeLeft <= warning.threshold) {\n            remainingPathColor = \"orange\"; \n        } else {\n            remainingPathColor = 'green'; \n        }\n    };\n\n    function shake(timeLeft) {\n        const circle = document.querySelector('.base-timer__circle'); \n        if (timeLeft <= 10) {\n            circle.style.animation = \"shake 0.5s cubic-bezier(0.42, 0.0, 0.58, 1.0) both\"; \n            setTimeout(() => {\n                circle.removeAttribute(\"style\"); \n            }, 500);  \n        }\n    }\n    \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);   \n        }, 1000);\n        setCircleDasharray();\n        setPathColor(counter);   \n        setTime(counter);\n        shake(counter); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <div className={\"base-timer\"}>\n           <svg className={\"base-timer__svg\"} viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n               <g className={\"base-timer__circle\"}>\n                   <circle className={\"base-timer__path-elapsed\"} cx=\"50\" cy=\"50\" r=\"45\" />\n                   <path \n                        id=\"base-timer-path-remaining\"\n                        strokeDasharray=\"283\"\n                        className={'base-timer__path-remaining'}\n                        style={{stroke: `${remainingPathColor}`}}\n                        d=\"\n                            M 50, 50\n                            m -45, 0\n                            a 45,45 0 1,0 90,0\n                            a 45,45 0 1,0 -90,0\n                            \"\n                    ></path>\n               </g>\n           </svg>\n           <span className={\"base-timer__label\"}>\n               {timeConversion(time)}\n           </span>\n       </div> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Modal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Clock.js",["141"],"import React, { useEffect } from 'react'; \nimport { timeConversion } from '../../component_utils/clock_helper'; \n\nconst Clock = ({setTime, counter, setCounter}) => {   \n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);  \n        }, 1000);\n        setTime(timeConversion(counter)); \n        return () => clearInterval(timer); \n    }, [counter]); \n\n    return (\n       <>\n       </> \n    )\n}\n\nexport default Clock; ","/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Light.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/component_utils/memory.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashAuth.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/navigation/NavBar.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/navigation/ProfileButton.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/LoginFormModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/SignUpModal.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Drawing.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalLog.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/auth/ModalSign.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/drawing/Instruction.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/math/Instruction.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/games/memory/Instruction.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/footer/Footer.js",[],"/home/rhys/Brainwhizz/react-whizz/src/components/splash/SplashUnAuth.js",["142"],"import React, {useState, useEffect, useRef} from 'react';\nimport './SplashUnAuth.css';\nimport koala from \"../../images/koala.jpg\";\nimport kangaroo from \"../../images/kangaroo.jpg\";\n\nconst SplashUnAuth = () => {\n    const message = \"Hi, I'm Bruce the Koala and welcome to Brainwhizz!! Unleash your intelligence right here\";\n    const messageTwo = \"And I'm Damo the Kangaroo. Come in and improve your skills in Math, Memory and Drawing!!\"; \n    const [index, setIndex] = useState(0); \n    const [indexTwo, setIndexTwo] = useState(88)\n    const [next, setNext] = useState(false); \n    const [brain, setBrain] = useState(false); \n    const i = useRef(0); \n    \n    useEffect(() => {\n        if (!message[index]) { \n            setTimeout(() => {\n                setNext(true); \n                document.getElementById(\"talkbubble_one\").style.display = \"none\"; \n            }, 1000); \n            return; \n        };\n\n        setTimeout(() => {\n            const char = document.getElementById(index);\n            //when user exits page early\n            if (!char) return;\n            char.style.display = \"inline\";\n            setIndex(index + 1);\n        }, 50);\n\n    }, [index]);\n\n    useEffect(() => { \n        if (!messageTwo[i.current]) {\n            setTimeout(() => {\n                document.getElementById(\"talkbubble_two\").style.display = \"none\"; \n            }, 1000);\n            setBrain(true); \n            return;\n        } \n\n        if (index >= 87) {\n            document.getElementById(\"talkbubble_two\").style.display = \"inline\"; \n            setTimeout(() => {\n                const char = document.getElementById(indexTwo);\n                //when user exits page early\n                if (!char) return;\n                char.style.display = \"inline\";\n                setIndexTwo(indexTwo + 1);\n            }, 50);\n    \n            i.current += 1; \n        }\n    }, [next, indexTwo]);\n\n    useEffect(() => {\n        if (brain) {\n            setTimeout(() => {\n                const logo = document.getElementById(\"logo_div\"); \n                logo.style.display = \"inline\"; \n                logo.style.animation = \"zoomUnAuth 2s linear both\"\n            }, 1000)\n        }\n    }, [brain])\n\n    return (\n        <div className={\"splashpage_main\"}>\n            <div className={\"koala_container\"}>\n                <img src={koala} alt=\"\" className={\"koala_image\"}/>\n            </div> \n            <div className={\"talkbubble_one\"} id={\"talkbubble_one\"}>\n                <div className={\"talkbubble_one-text\"}>\n                    {\n                        message.split('').map((char, index) => {\n                            return <span className={\"talkbubble_char\"} key={index} id={index}>{char}</span>\n                        })\n                    }\n                </div>\n            </div>\n            <div className={\"talkbubble_two\"} id={\"talkbubble_two\"}>\n                <div className={\"talkbubble_two-text\"}>\n                    {\n                        messageTwo.split('').map((char, index) => {\n                            return <span className={\"talkbubble_char\"} key={index} id={88 + index}>{char}</span>\n                        })\n                    }\n                </div>\n            </div>\n            <div className={\"kangaroo_container\"}>\n                <img src={kangaroo} alt=\"\" className={\"kangaroo_image\"}/>\n            </div> \n            <div className={\"logo_div\"} id={\"logo_div\"}>\n                    <div className={\"logo_text\"}>\n                        Brainwhizz\n                    </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SplashUnAuth; ",{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"143","replacedBy":"147"},{"ruleId":"145","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":39,"column":22,"nodeType":"151","messageId":"152","endLine":39,"endColumn":26},{"ruleId":"153","severity":1,"message":"154","line":80,"column":25,"nodeType":"155","messageId":"152","endLine":80,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":130,"column":8,"nodeType":"158","endLine":130,"endColumn":14,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":203,"column":54,"nodeType":"162","messageId":"163","endLine":203,"endColumn":56},{"ruleId":"160","severity":1,"message":"161","line":216,"column":54,"nodeType":"162","messageId":"163","endLine":216,"endColumn":56},{"ruleId":"156","severity":1,"message":"164","line":68,"column":8,"nodeType":"158","endLine":68,"endColumn":16,"suggestions":"165"},{"ruleId":"156","severity":1,"message":"166","line":82,"column":8,"nodeType":"158","endLine":82,"endColumn":14,"suggestions":"167"},{"ruleId":"156","severity":1,"message":"168","line":70,"column":8,"nodeType":"158","endLine":70,"endColumn":17,"suggestions":"169"},{"ruleId":"156","severity":1,"message":"170","line":11,"column":8,"nodeType":"158","endLine":11,"endColumn":17,"suggestions":"171"},{"ruleId":"156","severity":1,"message":"172","line":55,"column":8,"nodeType":"158","endLine":55,"endColumn":24,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],["174"],["175"],"no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.email'. Either include it or remove the dependency array.","ArrayExpression",["176"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'keyFrame'. Either include it or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'colors.length'. Either include it or remove the dependency array.",["178"],"React Hook useEffect has missing dependencies: 'setCircleDasharray', 'setCounter', and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["179"],"React Hook useEffect has missing dependencies: 'setCounter' and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["180"],"React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array.",["181"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [time, user.email]",{"range":"194","text":"195"},"Update the dependencies array to be: [colors, keyFrame]",{"range":"196","text":"197"},"Update the dependencies array to be: [colors.length, time]",{"range":"198","text":"199"},"Update the dependencies array to be: [counter, setCircleDasharray, setCounter, setTime]",{"range":"200","text":"201"},"Update the dependencies array to be: [counter, setCounter, setTime]",{"range":"202","text":"203"},"Update the dependencies array to be: [next, indexTwo, index]",{"range":"204","text":"205"},[4702,4708],"[time, user.email]",[2548,2556],"[colors, keyFrame]",[3143,3149],"[colors.length, time]",[2016,2025],"[counter, setCircleDasharray, setCounter, setTime]",[399,408],"[counter, setCounter, setTime]",[1882,1898],"[next, indexTwo, index]"]